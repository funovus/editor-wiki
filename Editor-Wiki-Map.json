{
	"dcei.engine.proto.Ability": {
		"link": "",
		"content": "Abilities are spells or skills that are cast by units. Similar to weapons, abilities create effect trees that determine their functionality.\n\n"

	},
	"dcei.engine.proto.Ability.template": {
		"link": "GenericField.template",
		"content": ""

	},
	"dcei.engine.proto.Ability.parent": {
		"link": "GenericField.parent",
		"content": ""

	},
	"dcei.engine.proto.Ability.ability_type": {
		"link": "",
		"content": "Determines how the ability's target location is chosen. Targeted abilities will cause the caster to enter [targeting mode](Trigger-API-Reference-DCEI-Functions-Ability#void-entertargetingmodeunit-unit-string-abilityname) while selecting a cast location. \n\n**NONE_ABILITY_TYPE**:  \n\n**TARGET**:  When cast, the target for the effect of the ability is a unit or location within range of the ability.\n\n**INSTANT**:  When cast, the casting unit or location is the target for the effect of the ability.\n\n"

	},
	"dcei.engine.proto.Ability.cast_type": {
		"link": "",
		"content": "**(NOTE: Currently AUTO type is not supported for targeted abilities)**.\n\n**NONE_CAST_TYPE**:  \n\n**MANUAL**:  The player must activate the ability themselves.\n\n**AUTO**:  The ability will automatically be cast when off cooldown and the validators are met.\n\n"

	},
	"dcei.engine.proto.Ability.target_range_mode": {
		"link": "",
		"content": "**NORMAL**:  When cast outside of the ability's range, the caster will attempt to move into range before casting.\n\n**CLAMP**:  When cast outside of the ability's range, the caster will cast the ability at the ability's maximum range in the direction of the target.\n\n**MAX_RANGE**:  The ability will always be cast at the maximum range in the direction of the target.\n\n"

	},
	"dcei.engine.proto.Ability.effect": {
		"link": "",
		"content": "The effect used by the ability when it is cast.\n\nSee: [Data/Effect](Data-Effect)\nFor [targeted abilities](#ability-type), this effect determines whether this ability can target units, locations, or both. This is usually decided by the effect's 'Target Type' or 'Location' field, though some effect types always occur at a unit or location.\n* **Example 1**: If the effect is a [Persistent](Data-Effect-Persistent) with [location](Data-Effect-Persistent#location) set to 'Target Location', then the ability targets locations. \n* **Example 2**: If the effect is a [Damage](Data-Effect-Damage) effect (which occurs on a unit), then the ability targets units.\n\n"

	},
	"dcei.engine.proto.Ability.stats": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.AbilityStats.prep_time": {
		"link": "",
		"content": "The delay between the ability being cast and the effect being executed.\n\nUsed with [Finish Time](#finish-time) for the purposes of animating the unit.\n\n"

	},
	"dcei.engine.proto.AbilityStats.finish_time": {
		"link": "",
		"content": "The delay between the effect being executed and the ability ending.\n\nThe [Finish Time](#finish-time) begins as soon as [Prep Time](#prep-time) ends.\nUsed with [Prep Time](#prep-time) for the purposes of animating the unit. The sum of [Prep Time](#prep-time) plus [Finish Time](#finish-time) is the minimum cooldown of an ability.\n\n"

	},
	"dcei.engine.proto.AbilityStats.cooldown": {
		"link": "",
		"content": "The cooldown of the ability or how long the unit must wait to use it again.\n\nThe [Cooldown](#cooldown) begins as soon as [Prep Time](#prep-time) ends.\nIf [Max Charge](#max-charge) is greater than 1, this instead determines how long it takes to gain another charge of the ability. In this case the cooldown of the ability is instead the sum of [Prep Time](#prep-time) plus [Finish Time](#finish-time) as long as there is another charge on the ability.\n\n"

	},
	"dcei.engine.proto.AbilityStats.use_initial_cooldown": {
		"link": "",
		"content": "If checked, this ability will start on cooldown.\n\n"

	},
	"dcei.engine.proto.AbilityStats.use_cooldown_on_enable": {
		"link": "",
		"content": "If checked, this ability will enter cooldown when it is disabled then enabled.\n\n"

	},
	"dcei.engine.proto.AbilityStats.range": {
		"link": "",
		"content": "The maximum distance for the target of the ability.\n\n"

	},
	"dcei.engine.proto.AbilityStats.scan_range": {
		"link": "",
		"content": "If ability's abilty type is **TARGET** and cast type is **AUTO**, this is the range that unit will use to search for targets.\n\n"

	},
	"dcei.engine.proto.AbilityStats.max_charge": {
		"link": "",
		"content": "The maximum number of charges for an ability. In order for an ability to be able to be cast, this number must be 1 or greater.\n\n"

	},
	"dcei.engine.proto.AbilityStats.arc": {
		"link": "",
		"content": "The angle in front of the caster that targets must be in. If the target is outside this arc, the caster will attempt to turn to face the target before casting. Example: Arc 360 means the ability can be cast in any direction, 90 is a cone in front, and 0 is directly facing the target.\n\n"

	},
	"dcei.engine.proto.Ability.use_unit_cost_difference": {
		"link": "",
		"content": "If the ability contains a morph effect, uses the difference in gold cost between the two units as the ability's gold cost.\n\nIf the ability contains a morph effect, uses the difference in gold cost between the two units as the ability's gold cost.\n\n"

	},
	"dcei.engine.proto.Ability.add_to_unit_cost": {
		"link": "",
		"content": "When checked, the cost of unit will be increased by the gold cost of the ability when it is cast.\n\n"

	},
	"dcei.engine.proto.Ability.cost": {
		"link": "",
		"content": "What resources the unit uses when it casts the ability. If the unit is unable to meet any of the costs, it is unable to cast the ability.\n\n"

	},
	"dcei.engine.proto.AbilityCost.health": {
		"link": "",
		"content": "How much health the unit loses when the ability is cast.\n\n"

	},
	"dcei.engine.proto.AbilityCost.mana": {
		"link": "",
		"content": "How much mana the unit loses when the ability is cast.\n\n"

	},
	"dcei.engine.proto.AbilityCost.gold": {
		"link": "",
		"content": "How much gold the player loses when the ability is cast.\n\n"

	},
	"dcei.engine.proto.Ability.priority": {
		"link": "",
		"content": "Abilities with higher priority can interrupt the casting of abilities with lower priority.\n\n"

	},
	"dcei.engine.proto.Ability.family": {
		"link": "",
		"content": "Can be used to target specific abilities for cooldown or charge modification using the [Modify Unit](Data-Effect-Modify-Unit) effect.\n\n"

	},
	"dcei.engine.proto.Ability.Validators": {
		"link": "",
		"content": "Each validator must succeed in order for the ability to be able to be cast.\n\nSee: [Data/Validator](Data-Validator)\n\n"

	},
	"dcei.engine.proto.Ability.level": {
		"link": "",
		"content": "Ability level reference that can be referenced in validator expressions.\n\n"

	},
	"dcei.engine.proto.Ability.can_cast_while_moving": {
		"link": "",
		"content": "If this is checked, using this ability will not stop movement.\n\n"

	},
	"dcei.engine.proto.Ability.is_rally_ability": {
		"link": "",
		"content": "Used for additional rally ability functionality in Wild Sky.\n\n"

	},
	"dcei.engine.proto.Ability.disabled": {
		"link": "",
		"content": "When checked, the ability is disabled by default. Requires behaviors or other means to be enabled.\n\n"

	},
	"dcei.engine.proto.Ability.hide": {
		"link": "",
		"content": "When checked, the ability is hidden from the command card by default. Requires behaviors or other means to be visible.\n\n"

	},
	"dcei.engine.proto.Ability.distance_check_mode": {
		"link": "dcei.engine.proto.DistanceCheckModes",
		"content": ""

	},
	"dcei.engine.proto.Ability.distance_extend_mode": {
		"link": "dcei.engine.proto.DistanceExtendModes",
		"content": ""

	},
	"dcei.engine.proto.Ability.target_filter": {
		"link": "dcei.engine.proto.SearchFilter",
		"content": ""

	},
	"dcei.engine.proto.Ability.highlight": {
		"link": "",
		"content": "If checked, the ability will always be highlighted on the unit's command card and a behavior or some other means will be needed to stop it.\n\n"

	},
	"dcei.engine.proto.Ability.ability_tags": {
		"link": "",
		"content": "Used in conjunction with Issue Ability effect to cast abilities with specific tags.\n\nSee: [Data/Effect/Issue Ability](Data-Effect-Issue-Ability).\nCan also be used to target specific abilities for cooldown reduction using the [Modify Unit](Data-Effect-Modify-Unit) effect.\n\n"

	},
	"dcei.engine.proto.Ability.charge_ignore_cooldown": {
		"link": "",
		"content": "If checked, the ability charges will not recover each cooldown. Instead the ability charges must be changed some other way.\n\n"

	},
	"dcei.engine.proto.Ability.show_charge_count_ui": {
		"link": "",
		"content": "Whether the charges of the ability are displayed in the in-game UI or not.\n\n"

	},
	"dcei.engine.proto.Ability.critical_chance": {
		"link": "",
		"content": "The chance that the ability usage is considered a critical. The value is a fraction, so 0 is 0% chance and 1 is 100% chance of critical hit.\n\n"

	},
	"dcei.engine.proto.Ability.critical_effect": {
		"link": "",
		"content": "The effect that is executed instead of the effect when the ability is a critical.\n\nIf this is not set, the default [effect](#effect) will be used on critical instead.\n\n"

	},
	"dcei.engine.proto.Ability.dependent_units": {
		"link": "",
		"content": "Dependent units will be loaded when the ability is loaded.\n\nAny units declared here will be preloaded when this ability is preloaded. This is an alternative to declaring data in [Settings](Data-ProjectSetting).\n\n"

	},
	"dcei.engine.proto.Ability.dependent_effects": {
		"link": "",
		"content": "Dependent effects will be loaded when this unit is loaded.\n\nAny effects declared here will be preloaded when this ability is preloaded. This is an alternative to declaring data in [Settings](Data-ProjectSetting).\n\n"

	},
	"dcei.engine.proto.Ability.dependent_behaviors": {
		"link": "",
		"content": "Dependent behaviors will be loaded when this unit is loaded.\n\nAny behaviors declared here will be preloaded when this ability is preloaded. This is an alternative to declaring data in [Settings](Data-ProjectSetting).\n\n"

	},
	"dcei.engine.proto.Ability.command_card_index": {
		"link": "",
		"content": "What slot of the In-Game UI Command Card the ability occupies.\n\nCan be used to lay out the abilities on a unit in a certain manner.\n\n"

	},
	"dcei.engine.proto.Ability.command_card_icon": {
		"link": "",
		"content": "The icon of the ability.\n\n"

	},
	"dcei.engine.proto.Ability.command_card_confirm_icon": {
		"link": "",
		"content": "If the ability needs to be confirmed (i.e., tap a second time to use), the icon to display after the first tap.\n\n"

	},
	"dcei.engine.proto.Ability.command_card_display_text": {
		"link": "",
		"content": "The text that the ability button displays when it is opened.\n\n"

	},
	"dcei.engine.proto.Ability.command_card_enhancement_icon": {
		"link": "",
		"content": "The icon for the ability when it is enhanced.\n\n"

	},
	"dcei.engine.proto.Ability.command_card_ornament_icon": {
		"link": "",
		"content": "The icon for the ability when it has an ornament.\n\n"

	},
	"dcei.engine.proto.Ability.preserve_menu": {
		"link": "",
		"content": "When the ability is used through the tower menu, the menu stays open.\n\n"

	},
	"dcei.engine.proto.Ability.description": {
		"link": "",
		"content": "Used by wild sky, can be used for the description of an ability.\n\n"

	},
	"dcei.engine.proto.Ability.title": {
		"link": "",
		"content": "Used by wild sky, can be used to form a title for the ability.\n\n"

	},
	"dcei.engine.proto.Ability.affinity_index": {
		"link": "",
		"content": "The affinity of this ability. Only set this field if: 1. this is a ship ability. 2. and this ability is used as a built-in ability (i.e., not added through a loadout spell card but available in the level automatically). The mapping: 1 => normal 2 => fire 3 => ice 4 => nature 5 => light 6 => dark.\n\nUsed by Wild Sky to help associate abilities with affinities.\n\n"

	},
	"dcei.engine.proto.Ability.card_name": {
		"link": "",
		"content": "Used to associate the ability with a card name for damage stats tracking.\n\n"

	},
	"dcei.engine.proto.Ability.targeting_valid_cursor_actor": {
		"link": "",
		"content": "The cursor actor used for the ability's target mode when the target is valid.\n\n"

	},
	"dcei.engine.proto.Ability.targeting_invalid_cursor_actor": {
		"link": "",
		"content": "The cursor actor used for the ability's target mode when the target is invalid.\n\n"

	},
	"dcei.engine.proto.Actor.action_actor": {
		"link": "",
		"content": "Action Actors don't have models or sounds themselves, but are used to help hook up visuals and sounds to effects. You generally want to have at least one action actor for each [Weapon] and [Ability](Data-Ability).\n\n"

	},
	"dcei.engine.proto.ActionActor.effect": {
		"link": "",
		"content": "The effect that triggers the action.\n\nTypically used to set the impact actor of a single effect (such as a [Damage](Data-Effect-Damage) effect or [Area Search](Data-Effect-Area-Search)) or the launch and impact actor of a [Launch Missile](Data-Effect-Launch-Missile) effect.\n\n"

	},
	"dcei.engine.proto.ActionActor.launch_model": {
		"link": "",
		"content": "The actor that's created when the action actor's effect starts. Uses the start location of the **effect**\n\n"

	},
	"dcei.engine.proto.ActionActor.launch_model_detached": {
		"link": "",
		"content": "When checked, prevents the launch model from following a unit if the **effect** target is a unit.\n\n"

	},
	"dcei.engine.proto.ActionActor.impact_model": {
		"link": "",
		"content": "The actor that's created when the action actor's **effect** ends. Uses the end location of the effect.\n\n"

	},
	"dcei.engine.proto.ActionActor.impact_model_detached": {
		"link": "",
		"content": "When checked, prevents the impact model from following a unit if the **effect** target is a unit.\n\n"

	},
	"dcei.engine.proto.ActionActor.beam_model": {
		"link": "",
		"content": "Creates a beam between the action's **launch site** and **target site**.\n\n"

	},
	"dcei.engine.proto.ActionActor.launch_site": {
		"link": "",
		"content": "Used to attach the launch model to a [Host Site](Data-Actor-Unit-Actor#host-sites) on the caster.\n\n"

	},
	"dcei.engine.proto.ActionActor.target_site": {
		"link": "",
		"content": "Used to attach the impact model to a [Host Site](Data-Actor-Unit-Actor#host-sites) on the target.\n\n"

	},
	"dcei.engine.proto.ActionActor.launch_site_operations": {
		"link": "",
		"content": "Site operations applied to the **launch model**.\n\n"

	},
	"dcei.engine.proto.ActionActor.target_site_operations": {
		"link": "",
		"content": "Site operations applied to the **impact model**.\n\n"

	},
	"dcei.engine.proto.ActionActor.host_site": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActionActor.host_site_operations": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActionActor.additional_models": {
		"link": "",
		"content": "Used to add additional launch and impact models to the action.\n\n"

	},
	"dcei.engine.proto.Actor.model_actor": {
		"link": "",
		"content": "Model actors are used for all non-unit visuals and sound effects in the game. Each individual visual effect or sound has its own model actor. Shares many fields with [Unit Actor](Data-Actor-Unit-Actor).\n\n"

	},
	"dcei.engine.proto.ModelActor.resource": {
		"link": "dcei.engine.proto.ActorResource",
		"content": "The asset to use for the actor. This determines what the actor looks or sounds like.\n\n"

	},
	"dcei.engine.proto.ModelActor.events": {
		"link": "dcei.engine.proto.ActorEvent",
		"content": "Defines the [Actor Events](Data-ActorEvent).\n\n"

	},
	"dcei.engine.proto.ModelActor.event_macros": {
		"link": "",
		"content": "Event macros will be expanded after the events field.\n\nAdds a collection of actor events to the actor via [Event Macros](Data-Actor-Event-Macro).\n\n"

	},
	"dcei.engine.proto.ModelActor.host_site": {
		"link": "",
		"content": "Where this actor will be attached to in the actor scope. It can be the name of an actor (that actor will be used as the parent and this actor will be attached to its origin point), or a host site defined in an actor (that actor will be used as the parent and the referenced site will be the attach point), or an attachment defined in the model of an actor.\n\n"

	},
	"dcei.engine.proto.ModelActor.host_site_operations": {
		"link": "",
		"content": "A set of operations applied to the host site position/rotation to determine the final position/rotation for this actor.\n\n"

	},
	"dcei.engine.proto.ModelActor.host_sites": {
		"link": "",
		"content": "Define a list of named sites on this actor that other actors can be attached to (or reference).\n\n"

	},
	"dcei.engine.proto.ModelActor.host_sites.name": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.HostSite.offset": {
		"link": "",
		"content": "The position of the host site, relative to the actor's origin position.\n\n"

	},
	"dcei.engine.proto.ModelActor.additional_resources": {
		"link": "dcei.engine.proto.ActorResource",
		"content": "If set, a random resource will be chosen from a list comprised of this list and the [Resource Name](#resource-name). This is useful for playing random voice lines, among other uses.\n\n"

	},
	"dcei.engine.proto.ModelActor.model_scale": {
		"link": "",
		"content": "Adjusts the size of the model. Using 0 defaults to 1.\n\n"

	},
	"dcei.engine.proto.ModelActor.selection_bonus_radius": {
		"link": "",
		"content": "Adjusts the size of this actors's hit sphere for mouse selection and targeting if the model actor is within the scope of a unit actor. Useful for making small units more click-friendly.\n\nCan be previewed in [Debug Options](Debugging-Features).\n\n"

	},
	"dcei.engine.proto.ModelActor.aliases": {
		"link": "",
		"content": "User defined name references that can be used to send messages to this actor from other actors in the same scope.\n\n"

	},
	"dcei.engine.proto.ModelActor.include_in_unit_body": {
		"link": "",
		"content": "When enabled, the model actor counts as selectable when within the scope of a unit actor.\n\n"

	},
	"dcei.engine.proto.ModelActor.selection_shape": {
		"link": "dcei.engine.proto.UnitActor.SelectionShape",
		"content": "Used to change mouse selection collider from sphere (default) to a cube. Useful for games with grid-based selection.\n\n"

	},
	"dcei.engine.proto.ModelActor.selection_scale": {
		"link": "dcei.engine.proto.UnitActor.SelectionScale",
		"content": "Adjusts the scale of the selection collider if **Selection Shape** is set to Cube.\n\n"

	},
	"dcei.engine.proto.ModelActor.hide_shadow": {
		"link": "",
		"content": "Prevents the actor from casting a shadow.\n\n"

	},
	"dcei.engine.proto.ModelActor.scale_multiplier": {
		"link": "dcei.engine.proto.InitialScale",
		"content": "Sets the scale of the actor across individual axes. The final scale will be these values multiplied by the **Model Scale**.\n\n"

	},
	"dcei.engine.proto.ModelActor.sprite_options": {
		"link": "dcei.engine.proto.SpriteOptions",
		"content": "Sprite options are for actor using sprite as resource.\n\n"

	},
	"dcei.engine.proto.Actor.site_operation": {
		"link": "",
		"content": "Site operations are special actors that modify the position or rotation of other actors.\n\nThey can be used to do things like adding offsets to attached models or rotating a model to be upside down. Some site operations can also be used to apply motion over time to create basic \"animations\", such as making a unit spin or slowly float up and then down. \nSite operations can be applied via various [Site Operation](Data-Actor-Unit-Actor#host-site-operations) fields or through [Actor Events](Data-ActorEvent). Site operations stack cumulatively in the order in which they are applied.\n**Note**: Unit actors (and site operations applied to them) are purely the visual representation and not game objects themselves. Applying site operations to offset or rotate a unit actor does not change the unit's position or facing.\n\n"

	},
	"dcei.engine.proto.SiteOperation.offset": {
		"link": "dcei.engine.proto.SiteOperation.Offset",
		"content": "Applies an offset to the actor's position.\n\nThe offset is relative to the [Orientation](#orientation). \n\n"

	},
	"dcei.engine.proto.SiteOperation.rotate": {
		"link": "",
		"content": "Rotates an actor.\n\nThe X/Y/Z fields are used to apply static rotation (or a one-off rotation over time using actor [Events](Actor-Events)). The Dx/Dy/Dz field are used to apply a constant rotation over time (aka spin). The rotation is relative to the [Orientation](#orientation).\n**Note**: [Event Orientation](#orientation) and [Move Orientation](#orientation) settings are special cases that behave slightly differently than other orientations.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Rotate.x": {
		"link": "",
		"content": "The rotation in degrees around the X axis (aka Pitch).\n\n"

	},
	"dcei.engine.proto.SiteOperation.Rotate.y": {
		"link": "",
		"content": "The rotation in degrees around the Y axis (aka Yaw).\n\n"

	},
	"dcei.engine.proto.SiteOperation.Rotate.z": {
		"link": "",
		"content": "The rotation in degrees around the Z axis (aka Roll).\n\n"

	},
	"dcei.engine.proto.SiteOperation.Rotate.dx": {
		"link": "",
		"content": "The rotation in degrees per second around the X axis.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Rotate.dy": {
		"link": "",
		"content": "The rotation in degrees per second around the Y axis.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Rotate.dz": {
		"link": "",
		"content": "The rotation in degrees per second around the Z axis.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Rotate.orientation": {
		"link": "dcei.engine.proto.SiteOperation.OrientationType",
		"content": "Determines relative orientation of the rotation.\n\n"

	},
	"dcei.engine.proto.SiteOperation.absolute_height": {
		"link": "",
		"content": "Set's the absolute height (or Y position) of the actor. Can be used to make aura VFX appear at ground height regardless of unit height (assuming no cliffs are used).\n\nFunctionally similar to [Absolute Y](Data-Actor-Site-Operation-Absolute-Y) Site Op.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteHeight.height": {
		"link": "",
		"content": "Sets the absolute height of the actor.\n\n"

	},
	"dcei.engine.proto.SiteOperation.hold_position": {
		"link": "",
		"content": "Makes the actor no longer update position or rotation.\n\n"

	},
	"dcei.engine.proto.SiteOperation.absolute_offset": {
		"link": "",
		"content": "Sets the absolute position of an actor using world orientation.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteOffset.x": {
		"link": "",
		"content": "Horizontal position on the world grid. A value of 0 is the map's left edge.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteOffset.y": {
		"link": "",
		"content": "Height position on the world grid. A value of 0 is the map's base height.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteOffset.z": {
		"link": "",
		"content": "Vertical position on the world grid. A value of 0 is the map's bottom edge.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteOffset.x_range": {
		"link": "",
		"content": "If set, a random value between 0 and the X Range will be applied to the X position when this site operation is applied. Only accepts positive values.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteOffset.y_range": {
		"link": "",
		"content": "If set, a random value between 0 and the Y Range will be applied to the Y position when this site operation is applied. Only accepts positive values.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteOffset.z_range": {
		"link": "",
		"content": "If set, a random value between 0 and the Z Range will be applied to the Z position when this site operation is applied. Only accepts positive values.\n\n"

	},
	"dcei.engine.proto.SiteOperation.absolute_x": {
		"link": "",
		"content": "Locks the actor to a specific X value on the world grid.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteX.x": {
		"link": "",
		"content": "Horizontal position on the world grid. A value of 0 is the map's left edge.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteX.x_range": {
		"link": "",
		"content": "If set, a random value between 0 and the X Range will be applied to the X position when this site operation is applied. Only accepts positive values.\n\n"

	},
	"dcei.engine.proto.SiteOperation.absolute_y": {
		"link": "",
		"content": "Locks the actor to a specific Y value on the world grid.\n\nFunctionally similar to the [Absolute Height](Data-Actor-Site-Operation-Absolute-Height) Site Op.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteY.y": {
		"link": "",
		"content": "Height position on the world grid. A value of 0 is the map's base height.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteY.y_range": {
		"link": "",
		"content": "If set, a random value between 0 and the Y Range will be applied to the Y position when this site operation is applied. Only accepts positive values.\n\n"

	},
	"dcei.engine.proto.SiteOperation.absolute_z": {
		"link": "",
		"content": "Locks the actor to a specific Z value on the world grid.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteZ.z": {
		"link": "",
		"content": "Vertical position on the world grid. A value of 0 is the map's bottom edge.\n\n"

	},
	"dcei.engine.proto.SiteOperation.AbsoluteZ.z_range": {
		"link": "",
		"content": "If set, a random value between 0 and the Z Range will be applied to the Z position when this site operation is applied. Only accepts positive values.\n\n"

	},
	"dcei.engine.proto.SiteOperation.ballistic_move": {
		"link": "",
		"content": "Makes the actor move to a target position. Works the same as a Ballistic Mover.\n\n"

	},
	"dcei.engine.proto.SiteOperation.BallisticMove.target_position_offset": {
		"link": "dcei.engine.proto.SiteOperation.Offset",
		"content": "The offset for the target position of this site operation. This offset is relative the source actor's position and facing. Note that BallisticMove siteOperation may not work correctly with other siteOperation types that also change actors' positions.\n\n"

	},
	"dcei.engine.proto.SiteOperation.BallisticMove.flight_time": {
		"link": "",
		"content": "When set, the actor move speed will be adjusted so that it takes this time to reach its target, regardless of the distance. When using flight time, speed should be set to 0.\n\n"

	},
	"dcei.engine.proto.SiteOperation.BallisticMove.flight_time_range": {
		"link": "",
		"content": "A random value between 0 and this value is added to the flight time.\n\n"

	},
	"dcei.engine.proto.SiteOperation.BallisticMove.speed": {
		"link": "",
		"content": "Speed of the Actor. When using speed, flight time should be set to 0. Speed is measured in terrain grid-units-per-second.\n\n"

	},
	"dcei.engine.proto.SiteOperation.BallisticMove.speed_range": {
		"link": "",
		"content": "A random value between 0 and this value is added to the speed.\n\n"

	},
	"dcei.engine.proto.SiteOperation.BallisticMove.gravity": {
		"link": "",
		"content": "Used to determine the height of the arc. Higher values mean a higher arc.\n\n"

	},
	"dcei.engine.proto.SiteOperation.orbit": {
		"link": "",
		"content": "Makes the actor orbit its host site.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Orbit.radius": {
		"link": "",
		"content": "Sets the offset radius that the actor will orbit round its host.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Orbit.speed": {
		"link": "",
		"content": "Sets the speed of the orbit in degrees per second.\n\n"

	},
	"dcei.engine.proto.Actor.unit_actor": {
		"link": "",
		"content": "Unit actors determine how units look, sound, and animate. Units are linked to actors with the same name, and unit actors are automatically created without needing additional actor events.\n\nMaking changes to the **Presentation** fields of a unit will automatically create a new unit actor of the same name. Editing these fields will update the data of the linked unit actor.\n\n"

	},
	"dcei.engine.proto.UnitActor.resource": {
		"link": "dcei.engine.proto.ActorResource",
		"content": "The asset to use for the actor. This determines what the actor looks or sounds like.\n\n"

	},
	"dcei.engine.proto.UnitActor.preserve_on_unit_remove": {
		"link": "",
		"content": "By default, unit actor will be destroyed automatically when the unit is removed (on the UnitRemove event). When this flag is enabled enabled, the actor is not removed with the unit and must be destroyed with actor events. Enabling this flag is necessary for playing a death animations on the unit.\n\n"

	},
	"dcei.engine.proto.UnitActor.events": {
		"link": "dcei.engine.proto.ActorEvent",
		"content": "Defines the [Actor Events](Data-ActorEvent).\n\n"

	},
	"dcei.engine.proto.UnitActor.event_macros": {
		"link": "",
		"content": "Event macros will be expanded after the events field.\n\nAdds a collection of actor events to the actor via [Event Macros](Data-Actor-Event-Macro).\n\n"

	},
	"dcei.engine.proto.UnitActor.host_sites": {
		"link": "",
		"content": "Defines a list of named sites on this actor that other actors can be attached to (or reference).\n\n"

	},
	"dcei.engine.proto.UnitActor.host_sites.name": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.UnitActor.walk_animation_speed": {
		"link": "",
		"content": "Adjusts the speed of the unit's walk animation. This can be used to correct \"slippery feet\" on certain models.\n\n"

	},
	"dcei.engine.proto.UnitActor.model_scale": {
		"link": "",
		"content": "Adjusts the size of the model. Using 0 defaults to 1.\n\n"

	},
	"dcei.engine.proto.UnitActor.host_site_operations": {
		"link": "",
		"content": "A set of operations applied to the host site position/rotation to determine the final position/rotation for this actor.\n\n"

	},
	"dcei.engine.proto.UnitActor.selection_bonus_radius": {
		"link": "",
		"content": "Adjusts the size of this actors's hit sphere for mouse selection and targeting if the model actor is within the scope of a unit actor. Useful for making small units more click-friendly.\n\nCan be previewed in [Debug Options](Debugging-Features).\n\n"

	},
	"dcei.engine.proto.UnitActor.exclude_from_unit_body": {
		"link": "",
		"content": "If checked, this actor will not be considered as part of the unit when doing hit tests or calculating the bounds of the unit. If you use this flag, make sure there is at least one **Model Actor** on this unit that has the **Include In Unit Body** flag checked.\n\n"

	},
	"dcei.engine.proto.UnitActor.selection_shape": {
		"link": "dcei.engine.proto.UnitActor.SelectionShape",
		"content": "Used to change mouse selection collider from sphere (default) to a cube. Useful for games with grid-based selection.\n\n"

	},
	"dcei.engine.proto.UnitActor.selection_scale": {
		"link": "dcei.engine.proto.UnitActor.SelectionScale",
		"content": "Adjusts the scale of the selection collider if **Selection Shape** is set to Cube.\n\n"

	},
	"dcei.engine.proto.UnitActor.aliases": {
		"link": "",
		"content": "User defined name references that can be used to send messages to this actor from other actors in the same scope.\n\n"

	},
	"dcei.engine.proto.UnitActor.hide_shadow": {
		"link": "",
		"content": "Prevents the actor from casting a shadow.\n\n"

	},
	"dcei.engine.proto.UnitActor.scale_multiplier": {
		"link": "dcei.engine.proto.InitialScale",
		"content": "Sets the scale of the actor across individual axes. The final scale will be these values multiplied by the **Model Scale**.\n\n"

	},
	"dcei.engine.proto.UnitActor.sprite_options": {
		"link": "dcei.engine.proto.SpriteOptions",
		"content": "Sprite options are for actor using sprite as resource.\n\n"

	},
	"dcei.engine.proto.Actor": {
		"link": "",
		"content": "Actors are a complex and powerful piece of data that determines how units, visual effects, and sounds are presented in-game. The majority of how actors behave is configured with [Actor Events](Data-ActorEvent).\n\n"

	},
	"dcei.engine.proto.Actor.oneof_actor_type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Actor.template": {
		"link": "GenericField.template",
		"content": ""

	},
	"dcei.engine.proto.Actor.parent": {
		"link": "GenericField.parent",
		"content": ""

	},
	"dcei.engine.proto.ActorEvent": {
		"link": "",
		"content": "Events are used to play animations on units in response to data events (like playing an attack animation when a unit attacks with a weapon or playing a death animation when a unit dies.)\nEach event can have multiple conditions and multiple actions.\n![events](https://user-images.githubusercontent.com/56179276/88447226-b076c500-cde5-11ea-9b8a-bef7de1189d8.png)\nSimiliar to triggers, actor events have 3 components.\n* **Event**: The event that triggers the actor event.\n* **Condition**: Optional conditions to evaluate. All conditions must succeed for the action to be executed.\n* **Action**: The actions to execute in response to the event.\n\n"

	},
	"dcei.engine.proto.ActorEvent.actor_term": {
		"link": "",
		"content": "An actor event can be used multiple times on an actor. When the same event is used more than once, the events are checked in order from top to bottom.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_spawn": {
		"link": "",
		"content": "Triggers when the linked unit is spawned.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_morph": {
		"link": "",
		"content": "Triggers when a unit undergoes a **Morph** effect.\n\nIf **Unit Type** is not set, any morph on a unit will trigger this event.\n\n"

	},
	"dcei.engine.proto.ActorTerm.UnitTerm.unit_type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorTerm.unit_remove": {
		"link": "",
		"content": "Triggers when a unit is removed.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_stand": {
		"link": "",
		"content": "Triggers when a unit leaves its movement state (ie, when it begins standing).\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_walk": {
		"link": "",
		"content": "Triggers when a unit enters its movement state (ie, when it begins walking).\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_death": {
		"link": "",
		"content": "Triggers when a unit dies.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_weapon_start": {
		"link": "",
		"content": "Triggers when a unit begins attacking with a weapon.\n\nIf **Weapon** is not set, any weapon attack will trigger this event. If this event triggers a [Play Animation](#play-animation) action, the animation duration will be calculated from the weapon preswing + backswing, multiplied by any attack speed modifiers.\n\n"

	},
	"dcei.engine.proto.ActorTerm.UnitWeaponTerm.weapon": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorTerm.unit_weapon_stop": {
		"link": "",
		"content": "Triggers when a unit stops attacking with a weapon.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_ability_start": {
		"link": "",
		"content": "Triggers when a unit starts casting an ability.\n\nIf this event triggers a [Play Animation](#play-animation) action, the animation duration will be calculated from the ability prep time + finish time.\n\n"

	},
	"dcei.engine.proto.ActorTerm.UnitAbilityTerm.ability": {
		"link": "",
		"content": "If left blank, any ability will trigger the event.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_ability_stop": {
		"link": "",
		"content": "Triggers when a unit stops casting an ability.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_ability_targeting_on": {
		"link": "",
		"content": "Triggers when an ability enters targeting mode.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_ability_targeting_off": {
		"link": "",
		"content": "Triggers when an ability leaves targeting mode.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_children_selection_on": {
		"link": "",
		"content": "Triggers when the children of this unit are selected.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_children_selection_off": {
		"link": "",
		"content": "Triggers when the children of this unit are deselected.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_move_command_received": {
		"link": "",
		"content": "Triggers when a unit receives a movement command.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_attack_command_received": {
		"link": "",
		"content": "Triggers when a unit receives an attack command.\n\n"

	},
	"dcei.engine.proto.ActorTerm.unit_weapon_damage_point": {
		"link": "",
		"content": "Triggers when a unit executes an attack with a weapon (occurs after preswing).\n\n"

	},
	"dcei.engine.proto.ActorTerm.pre_ability_targeted_on": {
		"link": "",
		"content": "Triggers when a unit becomes highlighted by ability in targeting mode.\n\n"

	},
	"dcei.engine.proto.ActorTerm.pre_ability_targeted_off": {
		"link": "",
		"content": "Triggers when a unit is unhighlighted by ability in targeting mode.\n\n"

	},
	"dcei.engine.proto.ActorTerm.pre_ability_cast_targeted": {
		"link": "",
		"content": "Sent to the target unit's actor scope when a targeting ability is cast on the unit.\n\n"

	},
	"dcei.engine.proto.ActorTerm.selection_on": {
		"link": "",
		"content": "Triggers when a unit is selected or on mouse hover.\n\n"

	},
	"dcei.engine.proto.ActorTerm.SelectionTerm.selection_type": {
		"link": "",
		"content": "**SELECTION**:  Use **selection** for on select.\n\n**PRE_SELECTION**:  Use **preselection** for on hover.\n\n"

	},
	"dcei.engine.proto.ActorTerm.selection_off": {
		"link": "",
		"content": "Triggers when a unit is deselected or on mouse hover off.\n\n"

	},
	"dcei.engine.proto.ActorTerm.behavior_on": {
		"link": "",
		"content": "Triggers when a unit gains a behavior.\n\nIf **Behavior** is not set, any behavior will trigger this event.\n\n"

	},
	"dcei.engine.proto.ActorTerm.BehaviorTerm.behavior": {
		"link": "",
		"content": "The behavior that triggers this event.\n\n"

	},
	"dcei.engine.proto.ActorTerm.behavior_off": {
		"link": "",
		"content": "Triggers when a unit loses a behavior (including if the behavior becomes disabled).\n\nIf **Behavior** is not set, any behavior will trigger this event.\n\n"

	},
	"dcei.engine.proto.ActorTerm.behavior_stack_increase": {
		"link": "",
		"content": "Triggers when a unit gains behavior stack(s).\n\n"

	},
	"dcei.engine.proto.ActorTerm.behavior_stack_decrease": {
		"link": "",
		"content": "Triggers when a unit loses behavior stack(s).\n\n"

	},
	"dcei.engine.proto.ActorTerm.persistent_effect_on": {
		"link": "",
		"content": "Triggers when a persistent effect is created.\n\nThe persistent effect must have a [period count](Data-Effect-Persistent#periodic-count) of at least 1. If **Effect** is not set, any persistent effect will trigger this effect.\n\n"

	},
	"dcei.engine.proto.ActorTerm.EffectTerm.effect": {
		"link": "",
		"content": "The persistent effect that triggers this event.\n\n"

	},
	"dcei.engine.proto.ActorTerm.persistent_effect_off": {
		"link": "",
		"content": "Triggers when a persistent effect is destroyed.\n\n"

	},
	"dcei.engine.proto.ActorTerm.actor_create": {
		"link": "",
		"content": "Triggers when the actor is created.\n\n"

	},
	"dcei.engine.proto.ActorTerm.actor_destroy": {
		"link": "",
		"content": "Triggers when the actor is destroyed.\n\n"

	},
	"dcei.engine.proto.ActorTerm.actor_orphan": {
		"link": "",
		"content": "Triggers when the actor becomes orphaned. Actors become orphaned when their host actor is destroyed (an actor's host is typically the actor that created it).\n\n"

	},
	"dcei.engine.proto.ActorTerm.animation_finish": {
		"link": "",
		"content": "Triggers when an animation on the actor finishes.\n\n"

	},
	"dcei.engine.proto.ActorTerm.AnimationTerm.clip": {
		"link": "",
		"content": "The animation that should trigger this event.\n\n"

	},
	"dcei.engine.proto.ActorTerm.on_timer": {
		"link": "",
		"content": "Triggers when a [timer](#create-timer) expires.\n\n"

	},
	"dcei.engine.proto.ActorTerm.TimerTerm.name": {
		"link": "",
		"content": "The name of the timer that triggers this event.\n\n"

	},
	"dcei.engine.proto.ActorTerm.on_custom_event": {
		"link": "",
		"content": "Triggers when a [custom event](#send-custom-event) is recieved.\n\n"

	},
	"dcei.engine.proto.ActorTerm.CustomEvent.identifier": {
		"link": "",
		"content": "The name of the custom event that triggers this event.\n\n"

	},
	"dcei.engine.proto.ActorTerm.beam_lost_target": {
		"link": "",
		"content": "Triggers when the target of beam model actor is destroyed.\n\n"

	},
	"dcei.engine.proto.ActorTerm.beam_lost_launch": {
		"link": "",
		"content": "Triggers when the launch of beam model actor is destroyed.\n\n"

	},
	"dcei.engine.proto.ActorEvent.conditions": {
		"link": "",
		"content": "Conditions to be met for the actions to be executed. If any of the condition evaulates to 0, the actions will not be executed. Note that the condition will be evaulated in the context of an existing actor. If this event is used to create a new actor (e.g., create a actor when a certain behavior is turned on), the evaulation context will be the root of the actor scope (e.g., the unit actor). If no actor can be found, the conditions are assumed to be met.\n\nIn most cases, you want to use the [Compare](Data-ActorExpression#compare) condition.\n\n"

	},
	"dcei.engine.proto.ActorEvent.actions": {
		"link": "",
		"content": "Actions to run in response to an event, after conditions are checked. Actions that target other actors can only be sent to other actors of the same scope.\n\n"

	},
	"dcei.engine.proto.ActorAction.play_animation": {
		"link": "",
		"content": "Plays an animation on the actor.\n\nGPU model animations can be previewed in the Asset Previewer.\n\n"

	},
	"dcei.engine.proto.ActorAction.PlayAnimation.clip_id": {
		"link": "",
		"content": "Which animation to play. The default animation is \"Attack\".\n\n"

	},
	"dcei.engine.proto.ActorAction.PlayAnimation.use_real_timer": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.stop_animation": {
		"link": "",
		"content": "Stops playing an animation that was initiated by a [Play Animation](#play-animation) action.\n\n"

	},
	"dcei.engine.proto.ActorAction.StopAnimation.clip_id": {
		"link": "",
		"content": "Which animation to stop playing. The default animation is \"Attack\".\n\n"

	},
	"dcei.engine.proto.ActorAction.create": {
		"link": "",
		"content": "Create a new actor in the scope of this actor.\n\nThe new actor should be a [Model Actor](Data-Actor-Model-Actor).\n\n"

	},
	"dcei.engine.proto.ActorAction.CreateActor.actor": {
		"link": "",
		"content": "The type of new actor to create.\n\n"

	},
	"dcei.engine.proto.ActorAction.CreateActor.host_site": {
		"link": "",
		"content": "If set, this value will overwrite the **Host Site** field of the created actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.CreateActor.host_site_operations": {
		"link": "",
		"content": "If set, this value will overwrite the **Host Site Operations** field of the created actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.CreateActor.aliases": {
		"link": "",
		"content": "Used to assign an **Alias** to the new actor.\n\nAn actor can be referenced by its name or any of its aliases.\n\n"

	},
	"dcei.engine.proto.ActorAction.CreateActor.detached": {
		"link": "",
		"content": "When checked, prevents the created actor from following its source actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.destroy": {
		"link": "",
		"content": "Destroys an actor.\n\nIf **Actor** is not set, the actor will destroy itself.\n\n"

	},
	"dcei.engine.proto.ActorAction.DestroyActor.actor": {
		"link": "",
		"content": "Look for an actor with this name within the scope to destroy.\n\n"

	},
	"dcei.engine.proto.ActorAction.log": {
		"link": "",
		"content": "Prints a log message in the [Play Settings Log](Data-Play-Settings).\n\n"

	},
	"dcei.engine.proto.ActorAction.DebugLog.type": {
		"link": "",
		"content": "Determines if the message is displayed as a debug, warning, or error message.\n\n**DEBUG**:  The log message will use black text.\n\n**WARNING**:  The log message will use yellow text.\n\n**ERROR**:  The log message will use red text.\n\n"

	},
	"dcei.engine.proto.ActorAction.DebugLog.message": {
		"link": "",
		"content": "The message to be printed.\n\n"

	},
	"dcei.engine.proto.ActorAction.create_timer": {
		"link": "",
		"content": "Creates a custom timer on the actor that triggers a [On Timer](#on-timer) event.\n\n"

	},
	"dcei.engine.proto.ActorAction.CreateTimer.name": {
		"link": "",
		"content": "Name of the timer. This name is only defined in the scope of the current actor. You can use the same timer name in different actors and they won't interfere.\n\n"

	},
	"dcei.engine.proto.ActorAction.CreateTimer.duration": {
		"link": "",
		"content": "How soon the timer should expire (in seconds). After the timer is expired, an OnTimer event will be sent to the actor.\n\nNote that actors are not bound by the 1/16 second game update, so any duration used here doesn't need to be a multiple of 0.0625.\n\n"

	},
	"dcei.engine.proto.ActorAction.CreateTimer.repeat": {
		"link": "",
		"content": "By default a timer will be removed after it's expired. Set this flag to true will keep the timer and an OnTimer event will be fired every time when the time specified in \"duration\" has passed.\n\n"

	},
	"dcei.engine.proto.ActorAction.remove_timer": {
		"link": "",
		"content": "Removes a timer without trigger an [On Timer](#on-timer) event.\n\n"

	},
	"dcei.engine.proto.ActorAction.RemoveTimer.name": {
		"link": "",
		"content": "Name of the timer to remove. Note that a timer event may still be fired after removing the timer.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_site_operations": {
		"link": "",
		"content": "Sets the [Site Operations](Data-Actor-Model-Actor#host-site-operations) of the actor. Note that unless **Append** is enabled, the new site operations will overwrite any existing site operations on the actor. **Duration** can be used to create simple animations.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetSiteOperations.site_operations": {
		"link": "",
		"content": "The site operations to apply to the actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetSiteOperations.duration": {
		"link": "",
		"content": "If set, the site operations will be applied over this duration. Does not work for all types of site operations.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetSiteOperations.append": {
		"link": "",
		"content": "If set, the new site operations will be added to the existing site operations on the actor instead of overwriting them. Does not work for all type sof site operations.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetSiteOperations.ease": {
		"link": "",
		"content": "The easing function to use if the site operations are applied over a duration.\n\n**LINEAR**:  \n\n**IN_SINE**:  \n\n**OUT_SINE**:  \n\n**IN_OUT_SINE**:  \n\n**IN_QUAD**:  \n\n**OUT_QUAD**:  \n\n**IN_OUT_QUAD**:  \n\n**IN_CUBIC**:  \n\n**OUT_CUBIC**:  \n\n**IN_OUT_CUBIC**:  \n\n**IN_QUART**:  \n\n**OUT_QUART**:  \n\n**IN_OUT_QUART**:  \n\n**IN_QUINT**:  \n\n**OUT_QUINT**:  \n\n**IN_OUT_QUINT**:  \n\n**IN_EXPO**:  \n\n**OUT_EXPO**:  \n\n**IN_OUT_EXPO**:  \n\n**IN_CIRC**:  \n\n**OUT_CIRC**:  \n\n**IN_OUT_CIRC**:  \n\n**IN_ELASTIC**:  \n\n**OUT_ELASTIC**:  \n\n**IN_OUT_ELASTIC**:  \n\n**IN_BACK**:  \n\n**OUT_BACK**:  \n\n**IN_OUT_BACK**:  \n\n**IN_BOUNCE**:  \n\n**OUT_BOUNCE**:  \n\n**IN_OUT_BOUNCE**:  \n\n**FLASH**:  \n\n**IN_FLASH**:  \n\n**OUT_FLASH**:  \n\n**IN_OUT_FLASH**:  \n\n"

	},
	"dcei.engine.proto.ActorAction.SetSiteOperations.ease_intensity": {
		"link": "",
		"content": "Optional parameter for some easing functions (elastic, back, and bounce) to adjust the amplitude or overshoot amount.\n\n"

	},
	"dcei.engine.proto.ActorAction.create_aliases": {
		"link": "",
		"content": "Add aliases for an actor.\n\nApplies an [alias](Data-Actor-Model-Actor#aliases) to the actor. If **Actor** is not set, the aliases will be applied to this actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.CreateAliases.actor": {
		"link": "",
		"content": "The actor to apply the aliases to. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.CreateAliases.aliases": {
		"link": "",
		"content": "The aliases to apply.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_variable": {
		"link": "",
		"content": "Sets a variable on the actor that can be checked by [Conditions](#conditions).\n\n"

	},
	"dcei.engine.proto.ActorAction.SetVariable.name": {
		"link": "",
		"content": "The name of the variable.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetVariable.value_expression": {
		"link": "",
		"content": "The value of the variable. Most commonly set to a constant, random integer, or using add to increment the variable by a constant.\n\n"

	},
	"dcei.engine.proto.ActorAction.send_custom_event": {
		"link": "",
		"content": "Sends a custom event that triggers an [On Custom Event](#on-custom-event) event. If **Actor** is not set, then the actor will send the custom event to itself. If the actor scope contains multiple actors with the targeted name or alias, only the first actor will recieve the event (See: [Broadcast Custom Event](#broadcast-custom-event)).\n\n"

	},
	"dcei.engine.proto.ActorAction.SendCustomEvent.actor": {
		"link": "",
		"content": "The actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.SendCustomEvent.identifier": {
		"link": "",
		"content": "The name of the custom event.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_tint_color": {
		"link": "",
		"content": "Sets the tint color of the actor. To clear tint color use ClearTintColor or set RGB to 255, 255, 255.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetTintColor.actor": {
		"link": "",
		"content": "The actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetTintColor.color": {
		"link": "",
		"content": "These color values will be used to tint the model multiplicatively.\n\nFor example, a value of (0, 0, 255) will cause the model to lose all of its red and green colors, and become bright blue; a value of (128, 128, 1024) will weaken the model's red and green colors by half, and amplify the blue color by 400%.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetTintColor.priority_label": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.PriorityLabel.label": {
		"link": "",
		"content": "Use labels to apply multiple tint colors. Only the current tint color with the highest priority will be used. Use ClearTintColor to remove tint color by label.\n\n"

	},
	"dcei.engine.proto.PriorityLabel.priority": {
		"link": "",
		"content": "Setting tint color with higher priority will overwrite any tint colors with lower priority. The default priority is 50.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetTintColor.duration": {
		"link": "",
		"content": "If set, the tint color will be applied over this duration.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetTintColor.ease": {
		"link": "",
		"content": "The easing function to use if the tint color is applied over a duration.\n\n**LINEAR**:  \n\n**IN_SINE**:  \n\n**OUT_SINE**:  \n\n**IN_OUT_SINE**:  \n\n**IN_QUAD**:  \n\n**OUT_QUAD**:  \n\n**IN_OUT_QUAD**:  \n\n**IN_CUBIC**:  \n\n**OUT_CUBIC**:  \n\n**IN_OUT_CUBIC**:  \n\n**IN_QUART**:  \n\n**OUT_QUART**:  \n\n**IN_OUT_QUART**:  \n\n**IN_QUINT**:  \n\n**OUT_QUINT**:  \n\n**IN_OUT_QUINT**:  \n\n**IN_EXPO**:  \n\n**OUT_EXPO**:  \n\n**IN_OUT_EXPO**:  \n\n**IN_CIRC**:  \n\n**OUT_CIRC**:  \n\n**IN_OUT_CIRC**:  \n\n**IN_ELASTIC**:  \n\n**OUT_ELASTIC**:  \n\n**IN_OUT_ELASTIC**:  \n\n**IN_BACK**:  \n\n**OUT_BACK**:  \n\n**IN_OUT_BACK**:  \n\n**IN_BOUNCE**:  \n\n**OUT_BOUNCE**:  \n\n**IN_OUT_BOUNCE**:  \n\n**FLASH**:  \n\n**IN_FLASH**:  \n\n**OUT_FLASH**:  \n\n**IN_OUT_FLASH**:  \n\n"

	},
	"dcei.engine.proto.ActorAction.SetTintColor.ease_intensity": {
		"link": "",
		"content": "Optional parameter for some easing functions (elastic, back, and bounce) to adjust the amplitude or overshoot amount.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_mesh_effect": {
		"link": "",
		"content": "Applies a mesh effect to to the model, overriding any existing mesh effects.\n\nIt's recommended to use [Apply Mesh Effect](#apply-mesh-effect) instead as it doesn't override existing mesh effects.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetMeshEffect.actor": {
		"link": "",
		"content": "The actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetMeshEffect.effect": {
		"link": "",
		"content": "dcei.engine.proto.ActorAction.SetMeshEffect.effect,,The mesh effect to apply.\n\n"

	},
	"dcei.engine.proto.ActorAction.play_music": {
		"link": "",
		"content": "Used to set the game's music track.\n\n"

	},
	"dcei.engine.proto.ActorAction.PlayMusic.music_name": {
		"link": "",
		"content": "The music asset to play.\n\n"

	},
	"dcei.engine.proto.ActorAction.PlayMusic.push": {
		"link": "",
		"content": "Whether to save the previously playing music to a stack. This is useful if you want to resume that music later (using **Stop Music** with the pop flag set to true).\n\n"

	},
	"dcei.engine.proto.ActorAction.stop_music": {
		"link": "",
		"content": "Used to stop the game's music track.\n\n"

	},
	"dcei.engine.proto.ActorAction.StopMusic.pop": {
		"link": "",
		"content": "If set to true, will play the previously saved music. If not set, the music will simply stop.\n\n"

	},
	"dcei.engine.proto.ActorAction.shake_camera": {
		"link": "",
		"content": "Shakes the camera.\n\n"

	},
	"dcei.engine.proto.ActorAction.ShakeCamera.parameters": {
		"link": "",
		"content": "If no parameters are set, the default camera shake will be used.\n\n"

	},
	"dcei.engine.proto.ActorAction.ShakeCamera.CameraShakeParameters.duration": {
		"link": "",
		"content": "The duration of the camera shake.\n\n"

	},
	"dcei.engine.proto.ActorAction.ShakeCamera.CameraShakeParameters.strength": {
		"link": "",
		"content": "The magnitude of the camera shake.\n\n"

	},
	"dcei.engine.proto.ActorAction.ShakeCamera.CameraShakeParameters.vibrato": {
		"link": "",
		"content": "The vibration intensity of the camera shake.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_visibility": {
		"link": "",
		"content": "Modifies the visibility of the actor. Hidden actors can't be selected or otherwise interact with the cursor.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetVisibility.actor": {
		"link": "",
		"content": "The actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetVisibility.visibility": {
		"link": "",
		"content": "If disabled, hide the actor. If enabled, show the actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_model_scale": {
		"link": "",
		"content": "The actor that should receive the event. Accepts an actor name or alias.\n\nSets the **[model scale](Data-Actor-Model-Actor#model-scale)** of the actor. The default model scale is 1.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetModelScale.actor": {
		"link": "",
		"content": "The name of the actor that should receive the event. Can be aliases.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetModelScale.model_scale": {
		"link": "",
		"content": "Adjusts the size of the model over a duration. Using model scale 0 defaults to 1.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetModelScale.model_scale_expression": {
		"link": "",
		"content": "The evaluated expression is added to the **Model Scale**.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetModelScale.duration": {
		"link": "",
		"content": "If set, the scale will be applied over this duration. This can be used to make simple grow/shrink animations.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetModelScale.ease": {
		"link": "",
		"content": "The easing function to use if the scale is applied over a duration.\n\n**LINEAR**:  \n\n**IN_SINE**:  \n\n**OUT_SINE**:  \n\n**IN_OUT_SINE**:  \n\n**IN_QUAD**:  \n\n**OUT_QUAD**:  \n\n**IN_OUT_QUAD**:  \n\n**IN_CUBIC**:  \n\n**OUT_CUBIC**:  \n\n**IN_OUT_CUBIC**:  \n\n**IN_QUART**:  \n\n**OUT_QUART**:  \n\n**IN_OUT_QUART**:  \n\n**IN_QUINT**:  \n\n**OUT_QUINT**:  \n\n**IN_OUT_QUINT**:  \n\n**IN_EXPO**:  \n\n**OUT_EXPO**:  \n\n**IN_OUT_EXPO**:  \n\n**IN_CIRC**:  \n\n**OUT_CIRC**:  \n\n**IN_OUT_CIRC**:  \n\n**IN_ELASTIC**:  \n\n**OUT_ELASTIC**:  \n\n**IN_OUT_ELASTIC**:  \n\n**IN_BACK**:  \n\n**OUT_BACK**:  \n\n**IN_OUT_BACK**:  \n\n**IN_BOUNCE**:  \n\n**OUT_BOUNCE**:  \n\n**IN_OUT_BOUNCE**:  \n\n**FLASH**:  \n\n**IN_FLASH**:  \n\n**OUT_FLASH**:  \n\n**IN_OUT_FLASH**:  \n\n"

	},
	"dcei.engine.proto.ActorAction.SetModelScale.ease_intensity": {
		"link": "",
		"content": "Optional parameter for some easing functions (elastic, back, and bounce) to adjust the amplitude or overshoot amount.\n\n"

	},
	"dcei.engine.proto.ActorAction.broadcast_custom_event": {
		"link": "",
		"content": "Similar [Send Custom Event](#send-custom-event) but the message is sent to all matching actors within the actor scope.\n\n"

	},
	"dcei.engine.proto.ActorAction.BroadcastCustomEvent.actor": {
		"link": "",
		"content": "The actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.BroadcastCustomEvent.identifier": {
		"link": "",
		"content": "The name of the custom event.\n\n"

	},
	"dcei.engine.proto.ActorAction.apply_mesh_effect": {
		"link": "",
		"content": "Applies a mesh effect to the actor. Mesh effects are similar to shaders effects.\n\n"

	},
	"dcei.engine.proto.ActorAction.ApplyMeshEffect.actor": {
		"link": "",
		"content": "The actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.ApplyMeshEffect.effect": {
		"link": "",
		"content": "The mesh effect to apply.\n\n"

	},
	"dcei.engine.proto.ActorAction.remove_mesh_effect": {
		"link": "",
		"content": "Removes a mesh effect from the actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.RemoveMeshEffect.actor": {
		"link": "",
		"content": "The actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.RemoveMeshEffect.effect": {
		"link": "",
		"content": "The mesh effect to remove.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_team_color": {
		"link": "",
		"content": "Applies colorization to specific sections of model's texture.\n\nCurrently only works with support models. Check the **Asset Previewer** to see which models support team color. Feel free to request more.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetTeamColor.actor": {
		"link": "",
		"content": "The actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetTeamColor.color": {
		"link": "",
		"content": "These color values will be used to colorize the team color sections of the model, using the A value as the blending value.\n\nFor example, a value of (0, 0, 255, 255) will set the team color to bright blue. Setting the A value to 0 means that no team color will be applied.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetTeamColor.second_color": {
		"link": "",
		"content": "These color values will be used to colorize the secondary team color sections of the model.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_shadow_height": {
		"link": "",
		"content": "Sets the shadow height of the actor.\n\nCan be used to make shadows appear for models on cliffs.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetShadowHeight.actor": {
		"link": "",
		"content": "The actor to set the shadow height for. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetShadowHeight.shadow_height": {
		"link": "",
		"content": "The value to set shadow height.\n\n"

	},
	"dcei.engine.proto.ActorAction.play_animation_with_duration": {
		"link": "",
		"content": "Similar to [Play Animation](#play-animation) but supports a duration for the animation. \n\n"

	},
	"dcei.engine.proto.ActorAction.PlayAnimationWithDuration.clip_id": {
		"link": "",
		"content": "Which animation to play. The default animation is \"Attack\".\n\n"

	},
	"dcei.engine.proto.ActorAction.PlayAnimationWithDuration.clip_duration": {
		"link": "",
		"content": "The duration of the animation.\n\n"

	},
	"dcei.engine.proto.ActorAction.PlayAnimationWithDuration.use_real_timer": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.pause_animation": {
		"link": "",
		"content": "Used to pause a currently playing animation on the actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.PauseAnimation.clip_id": {
		"link": "",
		"content": "Which animation to pause. The default animation is \"Attack\".\n\n"

	},
	"dcei.engine.proto.ActorAction.resume_animation": {
		"link": "",
		"content": "Resumes a paused animation on the actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.ResumeAnimation.clip_id": {
		"link": "",
		"content": "Which animation to resume. The default animation is \"Attack\".\n\n"

	},
	"dcei.engine.proto.ActorAction.play_sound": {
		"link": "",
		"content": "Used to play a sound from an actor directly.\n\nThe alternative is to create a separate sound actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.PlaySound.sound_name": {
		"link": "",
		"content": "The name of the sound asset to play.\n\n"

	},
	"dcei.engine.proto.ActorAction.PlaySound.volume": {
		"link": "",
		"content": "The volume multiplier for the sound. Using 0 defaults to 1.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_scale_multiplier": {
		"link": "",
		"content": "Sets the scale of the actor across individual axes. The final scale will be these values multiplied by the **Model Scale**.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetScaleMultiplier.actor": {
		"link": "",
		"content": "The name of the actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetScaleMultiplier.scale": {
		"link": "dcei.engine.proto.InitialScale",
		"content": "Specified the initial scale of the model and it can be non-uniform, this is display only, the finial display will multiply this by actual model scale\n\n"

	},
	"dcei.engine.proto.ActorAction.SetScaleMultiplier.duration": {
		"link": "",
		"content": "If set, the scale multiplier will be applied over this duration. This can be used to make simple grow/shrink animations.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetScaleMultiplier.ease": {
		"link": "",
		"content": "The easing function to use if the scale multiplier is applied over a duration.\n\n**LINEAR**:  \n\n**IN_SINE**:  \n\n**OUT_SINE**:  \n\n**IN_OUT_SINE**:  \n\n**IN_QUAD**:  \n\n**OUT_QUAD**:  \n\n**IN_OUT_QUAD**:  \n\n**IN_CUBIC**:  \n\n**OUT_CUBIC**:  \n\n**IN_OUT_CUBIC**:  \n\n**IN_QUART**:  \n\n**OUT_QUART**:  \n\n**IN_OUT_QUART**:  \n\n**IN_QUINT**:  \n\n**OUT_QUINT**:  \n\n**IN_OUT_QUINT**:  \n\n**IN_EXPO**:  \n\n**OUT_EXPO**:  \n\n**IN_OUT_EXPO**:  \n\n**IN_CIRC**:  \n\n**OUT_CIRC**:  \n\n**IN_OUT_CIRC**:  \n\n**IN_ELASTIC**:  \n\n**OUT_ELASTIC**:  \n\n**IN_OUT_ELASTIC**:  \n\n**IN_BACK**:  \n\n**OUT_BACK**:  \n\n**IN_OUT_BACK**:  \n\n**IN_BOUNCE**:  \n\n**OUT_BOUNCE**:  \n\n**IN_OUT_BOUNCE**:  \n\n**FLASH**:  \n\n**IN_FLASH**:  \n\n**OUT_FLASH**:  \n\n**IN_OUT_FLASH**:  \n\n"

	},
	"dcei.engine.proto.ActorAction.SetScaleMultiplier.ease_intensity": {
		"link": "",
		"content": "Optional parameter for some easing functions (elastic, back, and bounce) to adjust the amplitude or overshoot amount.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_shadow": {
		"link": "",
		"content": "Used to hide or show the shadow of an actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetShadow.actor": {
		"link": "",
		"content": "The name of the actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetShadow.shadow_display": {
		"link": "",
		"content": "When unchecked, hides the actor's shadow.\n\n"

	},
	"dcei.engine.proto.ActorAction.clear_tint_color": {
		"link": "",
		"content": "Removes tint color from the actor.\n\n"

	},
	"dcei.engine.proto.ActorAction.ClearTintColor.actor": {
		"link": "",
		"content": "The actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.ClearTintColor.label": {
		"link": "",
		"content": "If set, only the tint with the matching label will be removed. Otherwise all tint color will be removed.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_outline": {
		"link": "",
		"content": "Sets the outline render for the actor\n\n"

	},
	"dcei.engine.proto.ActorAction.SetOutline.actor": {
		"link": "",
		"content": "The name of the actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetOutline.outline_color": {
		"link": "",
		"content": "Sets the outline color. The default is black.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetOutline.outline_width": {
		"link": "",
		"content": "The outline width to use. The default is 1.\n\n"

	},
	"dcei.engine.proto.ActorAction.clear_outline": {
		"link": "",
		"content": "Clear the outline render for the actor\n\n"

	},
	"dcei.engine.proto.ActorAction.ClearOutline.actor": {
		"link": "",
		"content": "The name of the actor that should receive the event. Accepts an actor name or alias.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_walk_animation": {
		"link": "",
		"content": "Sets the walk animation for the actor\n\n"

	},
	"dcei.engine.proto.ActorAction.SetWalkAnimation.clip_id": {
		"link": "",
		"content": "Which animation to play when unit is moving.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_idle_animation": {
		"link": "",
		"content": "Sets the idle animation for the actor\n\n"

	},
	"dcei.engine.proto.ActorAction.SetIdleAnimation.clip_id": {
		"link": "",
		"content": "Which animation to play when unit is idle.\n\n"

	},
	"dcei.engine.proto.ActorAction.set_dynamic_aoe_params": {
		"link": "",
		"content": "Sets the cone angle and inner radius for dynamic AOEs\n\n"

	},
	"dcei.engine.proto.ActorAction.SetDynamicAoeParams.cone_angle": {
		"link": "",
		"content": "The angle of the AOE\n\n"

	},
	"dcei.engine.proto.ActorAction.SetDynamicAoeParams.inner_radius": {
		"link": "",
		"content": "The inner radius (as a fraction of the outer radius)\n\n"

	},
	"dcei.engine.proto.ActorAction.set_particle_properties": {
		"link": "",
		"content": "Sets particle start properties\n\n"

	},
	"dcei.engine.proto.ActorAction.SetParticleProperties.particle_properties": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.set_start_lifetime": {
		"link": "",
		"content": "How long will the particle last?\n\n"

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.SetStartLifetime.min_value": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.SetStartLifetime.max_value": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.set_start_speed": {
		"link": "",
		"content": "How fast does the particle move when spawned?\n\n"

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.SetStartSpeed.min_value": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.SetStartSpeed.max_value": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.set_start_size": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.SetStartSize.min_value": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.SetStartSize.max_value": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.set_start_color": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.SetStartColor.color_a": {
		"link": "",
		"content": "A random color will be picked in between ColorA and ColorB\n\n"

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.SetStartColor.color_b": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.set_simulation_speed": {
		"link": "",
		"content": "Sets the simulation speed of the entire particle system. Unlike SetStartSpeed which affects only the move speed of spawned particles (e.g., it does nothing if the spawned particles only rotate but not move), this makes everything move faster or slower. Default is 1.\n\n"

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.SetSimulationSped.value": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetParticleProperty.particle_sub_system": {
		"link": "",
		"content": "Which subsystem this event should affect\n\n"

	},
	"dcei.engine.proto.ActorAction.set_model": {
		"link": "",
		"content": "Sets a new model for an actor, only sprite resources are supported for now\n\n"

	},
	"dcei.engine.proto.ActorAction.SetModel.type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorAction.SetModel.name": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorExpressions.Expression": {
		"link": "",
		"content": "Conditions to be met for the actions to be executed. If any of the condition evaulates to 0 or false, the actions will not be executed. \nNote that the condition will be evaulated in the context of an existing actor. If this event is used to create a new actor (e.g., create a actor when a certain behavior is turned on), the evaulation context will be the root of the actor scope (e.g., the unit actor). If no actor can be found, the conditions are assumed to be met.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.compare": {
		"link": "",
		"content": "Compares two values/expressions and returns true or false based on the result.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.constant": {
		"link": "",
		"content": "Returns the given integer. Useful for comparing to other values.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.variable": {
		"link": "",
		"content": "Returns the given variable. Variables are set with the **Set Variable** actor action.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.add": {
		"link": "",
		"content": "Returns the sum of the listed expressions.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.if": {
		"link": "",
		"content": "Returns the result of the evaluated expression if the condition is true. Otherwise returns false.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.random_int": {
		"link": "",
		"content": "Returns a random integer between the min and max value.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.divide": {
		"link": "",
		"content": "Returns the result of the **left** value divided by the **right** value.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.multiply": {
		"link": "",
		"content": "Returns the result of the listed expressions multiplied together.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.subtract": {
		"link": "",
		"content": "Returns the result of the **right** value subtracted from the **left** value.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.logic_not": {
		"link": "",
		"content": "Returns the flipped value or expression (true becomes false, false becomes true).\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.logic_and": {
		"link": "",
		"content": "Returns true if all listed values/expressions are true.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.logic_or": {
		"link": "",
		"content": "Returns true if any listed values/expressions are true.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.area_search_radius": {
		"link": "",
		"content": "If the actor is created by an **area search** effect from an **action actor**, returns the radius of the search effect.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.unit_weapon_range": {
		"link": "",
		"content": "If the actor scope contains a unit, returns the maximum range of a weapon on the unit.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.unit_ability_range": {
		"link": "",
		"content": "If the actor scope contains a unit, returns the range of an ability on the unit.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.unit_team_id": {
		"link": "",
		"content": "If the actor scope contains a unit, returns the team id of the unit.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.behavior_stack_count": {
		"link": "",
		"content": "If the actor scope contains a unit, returns the current stack count of a behavior of the unit.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.unit_radius": {
		"link": "",
		"content": "If the actor scope contains a unit, returns the radius of the unit.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.is_critical_hit": {
		"link": "",
		"content": "Returns true if the actor event triggered by a critical hit.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.viewer_has_alliance_type": {
		"link": "",
		"content": "Returns true if the current viewer has a certain alliance type with the unit in the actor scope.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.viewer_has_player_id": {
		"link": "",
		"content": "Returns true if the current viewer has a certain player id.\n\n"

	},
	"dcei.engine.proto.ActorExpressions.Expression.behavior_stack_count_delta": {
		"link": "",
		"content": "If the actor event is triggered by **behavior_stack_increase** or **behavior_stack_decrease**, returns the stack count delta.\n\n"

	},
	"dcei.engine.proto.Behavior": {
		"link": "",
		"content": "Behaviors are usually buffs or debuffs that can be applied to units that modify the unit's attributes or how it acts. Behaviors can also apply tags and can function like custom attributes.\n\n"

	},
	"dcei.engine.proto.Behavior.default_stack_type": {
		"link": "",
		"content": "When the behavior's duration expires, it will remove a number of stacks as determined by \"Stacks Removed on Expire\".\n\n"

	},
	"dcei.engine.proto.Behavior.DefaultStackType.refresh_stack": {
		"link": "",
		"content": "If this is checked, the behavior's Duration will reset when subsequent stacks of the behavior are applied to the unit.\n\n"

	},
	"dcei.engine.proto.Behavior.DefaultStackType.stacks_removed_on_expire": {
		"link": "",
		"content": "How many behavior stacks will be removed when the duration expires, 0 means all stacks will be removed. If duration expires but not all behavior stacks removed, the duration timer will be refreshed.\n\n"

	},
	"dcei.engine.proto.Behavior.DefaultStackType.refresh_effect": {
		"link": "",
		"content": "The effect created when subsequent stacks of a behavior are applied to a unit.\n\n"

	},
	"dcei.engine.proto.Behavior.independent_stack_type": {
		"link": "",
		"content": "Each behavior stack will have its own duration.\n\n"

	},
	"dcei.engine.proto.Behavior.template": {
		"link": "GenericField.template",
		"content": ""

	},
	"dcei.engine.proto.Behavior.parent": {
		"link": "GenericField.parent",
		"content": ""

	},
	"dcei.engine.proto.Behavior.family": {
		"link": "",
		"content": "Used for filtering families of behaviors via behavior filter.\n\n"

	},
	"dcei.engine.proto.Behavior.alignment": {
		"link": "",
		"content": "You can set this field to say whether a behavior is good, bad, neutral, or both for a unit. Does not affect gameplay in any way.\n\n**NEUTRAL**:  Marks the behavior as neutral.\n\n**POSITIVE**:  Marks the behavior as positive.\n\n**NEGATIVE**:  Marks the behavior as negative.\n\n**MIXED**:  Marks the behavior as both positive and negative.\n\n"

	},
	"dcei.engine.proto.Behavior.refresh_stack": {
		"link": "",
		"content": "If this is checked, the behavior's Duration will reset when subsequent stacks of the behavior are applied to the unit.\n\n"

	},
	"dcei.engine.proto.Behavior.max_stack_count": {
		"link": "",
		"content": "The maximum number of stacks a unit can have of this behavior.\n\nApplying additional stacks beyond the maximum will not increase the stack count, but will refresh the duration if [Refresh Stack](#refresh-stack) is checked. \nA maximum stack count of 0 means that there is no limit to the number of copies allowed on a unit.\n\n"

	},
	"dcei.engine.proto.Behavior.update_duration_while_disabled": {
		"link": "",
		"content": "If this is checked and the behavior is disabled from a [Disable Validator](#Behavior-Validators-Disable), the behavior's [Duration](#duration) will continue to count down, rather than be paused.\n\n"

	},
	"dcei.engine.proto.Behavior.duration_random_addition": {
		"link": "",
		"content": "If set, a random value between 0 and the duration random addition will be added to behavior's the [Duration](#duration) when applied. A negative number will instead reduce the [Duration](#duration) in the same manner.\n\n"

	},
	"dcei.engine.proto.Behavior.unit_modifier": {
		"link": "",
		"content": "Modifications that are applied to the unit when the behavior is applied.\n\n"

	},
	"dcei.engine.proto.Behavior.UnitModifier.ownership": {
		"link": "",
		"content": "Used to change the owner of a unit. You typically want to use caster unit or source unit for charm behaviors.\n\n"

	},
	"dcei.engine.proto.Behavior.UnitModifier.target_behavior_type": {
		"link": "dcei.engine.proto.BehaviorComponent.BehaviorType",
		"content": "Used to change the unit's AI behavior type.\n\n"

	},
	"dcei.engine.proto.Behavior.duration": {
		"link": "",
		"content": "This is how long the behavior will last for.\n\nBy default, this duration is not reset when additional stacks are applied. All stacks are removed when the duration expires. A duration of 0 will result in the behavior lasting indefinitely.\n\n"

	},
	"dcei.engine.proto.Behavior.stacks_removed_on_expire": {
		"link": "",
		"content": "How many behavior stacks will be removed when the duration expires, 0 means all stacks will be removed. If duration expires but not all behavior stacks removed, the duration timer will be refreshed.\n\n"

	},
	"dcei.engine.proto.Behavior.start_effect": {
		"link": "",
		"content": "The effect created when the behavior is started.\n\n"

	},
	"dcei.engine.proto.Behavior.final_effect": {
		"link": "",
		"content": "The effect created when the behavior is removed.\n\n"

	},
	"dcei.engine.proto.Behavior.refresh_effect": {
		"link": "",
		"content": "The effect created when subsequent stacks of a behavior are applied to a unit.\n\nRequires the [Refresh Stack](#refresh-stack) flag to be enabled.\n\n"

	},
	"dcei.engine.proto.Behavior.expire_effect": {
		"link": "",
		"content": "The effect created when the behavior's duration expires.\n\nThis effect won't be executed if the behavior is removed via [Effect/Remove Behavior](Data-Effect-Remove-Behavior).\n\n"

	},
	"dcei.engine.proto.Behavior.periodic_interval": {
		"link": "",
		"content": "Determines how often the Periodic Effect occurs. Must be greater than 0 to function to create periodic effects.\n\n"

	},
	"dcei.engine.proto.Behavior.periodic_interval_expressions": {
		"link": "",
		"content": "The evaluated expressions are added to the Periodic Interval.\n\n"

	},
	"dcei.engine.proto.Behavior.periodic_effect": {
		"link": "",
		"content": "The effect created a the end of each Periodic Interval.\n\n"

	},
	"dcei.engine.proto.Behavior.periodic_effect_count": {
		"link": "",
		"content": "Determines how many times the Periodic Effect is run. A periodic effect with count of -1 will last until the behavior is removed.\n\n"

	},
	"dcei.engine.proto.Behavior.behavior_validators_apply": {
		"link": "",
		"content": "The behavior will only be applied if all of validators listed here succeed. Unlike Remove and Disable validators, these are only checked once.\n\n"

	},
	"dcei.engine.proto.Behavior.behavior_validators_remove": {
		"link": "",
		"content": "The behavior will be removed if any of these validators succeed.\n\n**NOTE:** these remove validators are checked every frame while the behavior is active and can cause significant CPU overhead. It's recommended to have less than 20 of such behaviors active at once.\n\n"

	},
	"dcei.engine.proto.Behavior.behavior_validators_disable": {
		"link": "",
		"content": "The behavior will be disabled if any of these validators succeed. The behavior will be enabled again the next time that all of these validators fail.\n\n**NOTE:** these disable validators are checked every frame while the behavior is active and can cause significant CPU overhead. It's recommended to have less than 20 of such behaviors active at once.\n\n"

	},
	"dcei.engine.proto.Behavior.modifiers": {
		"link": "",
		"content": "These modifiers can be applied to a number unit attributes (like health or movement speed) and different types of modifiers interact in different ways. Each modifier is applied once per stack of the behavior. Modifiers are only applied while the behavior is active.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.flags": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.BehaviorFlags.invulnerable": {
		"link": "",
		"content": "Prevents damage taken.\n\nCan be filtered by search filters such as in [Effect\\AreaSearch](Data-Effect-Area-Search#filter).\n\n"

	},
	"dcei.engine.proto.BehaviorFlags.stealth": {
		"link": "",
		"content": "Can be filtered by search filters. By itself stealth does not do anything.\n\n"

	},
	"dcei.engine.proto.BehaviorFlags.suppress_movement": {
		"link": "",
		"content": "Prevents the unit from moving.\n\n"

	},
	"dcei.engine.proto.BehaviorFlags.suppress_weapon": {
		"link": "",
		"content": "Prevents the unit using weapons.\n\n"

	},
	"dcei.engine.proto.BehaviorFlags.suppress_ability": {
		"link": "",
		"content": "Prevents the unit from casting abilities.\n\n"

	},
	"dcei.engine.proto.BehaviorFlags.suppress_turning": {
		"link": "",
		"content": "Prevents the unit from turning.\n\n"

	},
	"dcei.engine.proto.BehaviorFlags.suppress_collision": {
		"link": "",
		"content": "Prevents the unit from interacting with or being affected by other unit's collision.\n\n"

	},
	"dcei.engine.proto.BehaviorFlags.ignore_pathing": {
		"link": "",
		"content": "Prevents the unit from being restricted to moving on the navmesh.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.max_health_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's health.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.max_mana_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's mana.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.max_shield_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's shield.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.health_regeneration_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's health regen.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.mana_regeneration_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's mana regen.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.shield_regeneration_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's shield regen.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.unit_target_priority": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's target priority.\n\nSee: [Data/Unit/Target Priortity](Data-Unit#target-priority).\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.unit_radius_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's radius.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.move_speed_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's movement speed.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.attack_speed_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's weapon attack speed.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.weapon_damage_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's weapon damage.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.ability_damage_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's ability damage.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.weapon_damage_taken_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's damage taken (from weapons).\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.ability_damage_taken_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's damage taken (from abilities).\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.critical_chance_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's critical chance with weapons.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.ability_critical_chance_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's critical chance with abilities.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.ability_gold_cost_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the gold cost of the unit's abilities.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.ability_mana_cost_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the mana cost of the unit's abilities.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.ability_health_cost_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the health cost of the unit's abilities.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.heal_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's healing effects. Note that this modifier only applies to flat (non-percentage) healing effects.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.weapon_range_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's weapon range.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.weapon_scan_range_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's weapon scan range.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.ability_cooldown_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's cooldown recharge speed.\n\nIncreases the speed of ability **cooldown** by this factor.\nSetting **scaled** or **unscaled** to 1 will increase ability cooldown recharge speed to 200% (1.00 + 1.00 = 2.00), reducing the cooldown time by half.\nSetting **additive**, **unified**, or **multiplier factor** to 1 will also increase ability cooldown recharge speed to 200% (1.00 * (1.00 + 1.00) = 2.00).\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.ability_speed_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's ability cast speed.\n\nIncreases the speed of ability **prep time**, **finish time**, and **cooldown** by this factor.\nSetting **scaled** or **unscaled** to 1 will increase ability cast speed to 200% (1.00 + 1.00 = 2.00), reducing the total cast and cooldown time by half.\nSetting **additive**, **unified**, or **multiplier factor** to 1 will also increase ability cast speed to 200% (1.00 * (1.00 + 1.00) = 2.00).\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.ability_cooldown_period_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the unit's ability cooldown reduction.\n\nThis modifier only acts on ability **cooldown** and does not modify **prep time** or **finish time**.\nTo reduce ability cooldowns by 1 second, you could set the **scaled** or **unscaled** value to -1.\nTo reduce ability cooldowns by 50%, you could set the **additive**, **unified**, or **multiplier factor** to -0.5.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.disabled_weapons": {
		"link": "",
		"content": "Prevents the unit from using these weapons.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.enabled_weapons": {
		"link": "",
		"content": "Enables these weapons if they are disabled.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.disabled_weapon_families": {
		"link": "",
		"content": "Prevents the unit from using weapons under these families.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.enabled_weapon_families": {
		"link": "",
		"content": "Enables weapons under these families if they are disabled.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.weapon_modifier_group": {
		"link": "",
		"content": "If set, modifiers affecting weapons (such as weapon damage, weapon range, attack speed, etc) only apply to weapons listed here rather than to all weapons.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.ability_modifier_group": {
		"link": "",
		"content": "If set, modifiers affecting abilities (such as ability damage, ability cooldown, ability speed, etc) only apply to abilities listed here rather than to all abilities.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.disabled_abilities": {
		"link": "",
		"content": "Prevents the unit from using these abilities.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.enabled_abilities": {
		"link": "",
		"content": "Enables these abilities if they are disabled.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.hide_abilities": {
		"link": "",
		"content": "Hide these abilities from the built-in UI.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.show_abilities": {
		"link": "",
		"content": "Show these abilities in the built-in UI if hidden.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.add_highlight_to_abilities": {
		"link": "",
		"content": "Highlight these abilities in the built-in UI.\n\n"

	},
	"dcei.engine.proto.BehaviorModifiers.remove_highlight_from_abilities": {
		"link": "",
		"content": "Remove highlight from these abilities in the built-in UI.\n\n"

	},
	"dcei.engine.proto.Behavior.damage_response": {
		"link": "",
		"content": "Allows the unit to create an effect or modify damage amounts in response to taking or dealing damage.\n\n"

	},
	"dcei.engine.proto.DamageResponse.chance": {
		"link": "",
		"content": "The chance that the damage response will occur. If 0, the damage response will never be triggered. If 1 the damage response will always be triggered.\n\n"

	},
	"dcei.engine.proto.DamageResponse.cooldown": {
		"link": "",
		"content": "The duration (in seconds) the damage response has to wait before it has a Chance of occurring again.\n\n"

	},
	"dcei.engine.proto.DamageResponse.location": {
		"link": "",
		"content": "**DEFENDER**:  The damage response occurs when the unit takes damage.\n\n**ATTACKER**:  The damage response occurs when the unit deals damage.\n\n"

	},
	"dcei.engine.proto.DamageResponse.fatal_only": {
		"link": "",
		"content": "If enabled, the damage response only occurs when taking or dealing fatal damage.\n\n"

	},
	"dcei.engine.proto.DamageResponse.effect": {
		"link": "",
		"content": "The effect is created when the damage response succeeds.\n\n"

	},
	"dcei.engine.proto.DamageResponse.damage_modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "The damage that triggered the damage response is modified by these values when the damage response succeeds.\n\nSee [BehaviorModifier](#behaviormodifier) for how these values are calculated.\n\n"

	},
	"dcei.engine.proto.DamageResponse.validators": {
		"link": "",
		"content": "These validators must succeed when the damage response is triggered for the damage response to be executed.\n\n"

	},
	"dcei.engine.proto.DamageResponse.chance_modifier_per_stack": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": "Modifies the damage responses chance per stack of the behavior on the unit.\n\nSee [BehaviorModifier](#behaviormodifier) for how these values are calculated.\n\n"

	},
	"dcei.engine.proto.DamageResponse.damage_clamp_min": {
		"link": "",
		"content": "If set, any damage below this amount will be adjusted to this amount when the damage response is triggered.\n\n"

	},
	"dcei.engine.proto.DamageResponse.damage_clamp_max": {
		"link": "",
		"content": "If set, any damage above this amount will be adjusted to this amount when the damage response is triggered.\n\n"

	},
	"dcei.engine.proto.Behavior.death_response": {
		"link": "",
		"content": "Allows the unit to create an effect when it dies.\n\n"

	},
	"dcei.engine.proto.DeathResponse.chance": {
		"link": "",
		"content": "The chance that the death response will occur. If 0, the death response will never be triggered. If 1 the death response will always be triggered.\n\n"

	},
	"dcei.engine.proto.DeathResponse.effect": {
		"link": "",
		"content": "The effect created by the death response.\n\n[Target Type](#target-type) determines who it affects.\n\n"

	},
	"dcei.engine.proto.DeathResponse.target_type": {
		"link": "",
		"content": "The location where the death response occurs. In this context Caster/Source refers to the killing unit and Target refers to this unit.\n\n"

	},
	"dcei.engine.proto.Behavior.behavior_tag_array": {
		"link": "",
		"content": "Used to have the behavior apply global tags to the unit. Tags can be referenced in validators and expressions.\n\n"

	},
	"dcei.engine.proto.Behavior.TagItem.name": {
		"link": "",
		"content": "The name of the tag to apply.\n\n"

	},
	"dcei.engine.proto.Behavior.TagItem.count": {
		"link": "",
		"content": "The number of stacks of the tag to apply (per behavior stack).\n\n"

	},
	"dcei.engine.proto.Behavior.persist_through_morph": {
		"link": "",
		"content": "See: [Data/Effect/Morph](Data-Effect-Morph).\n\n"

	},
	"dcei.engine.proto.Behavior.locked": {
		"link": "",
		"content": "Disables the behavior. Used by Wild Sky to allow behaviors to be enabled by contextual loading.\n\n"

	},
	"dcei.engine.proto.BehaviorModifier": {
		"link": "",
		"content": "The total result of all modifiers for an attribute follows this formula:\n> ```CSS\n>  result = (value + sum(scaled))\n>           * (1 + sum(additive_factor))\n>           * (1 + positive(max(unified_factor)) + negative(min(unified_factor)))\n>           * (1 + multiplier_factor[1]) *  (1 + multiplier_factor[2])\n>           + sum(unscaled).\n>  ```\n>\n\n"

	},
	"dcei.engine.proto.BehaviorModifier.scaled": {
		"link": "",
		"content": "The value is added to the base value, and can be multiplied by additive, unified, or multiplier factors.\n\n"

	},
	"dcei.engine.proto.BehaviorModifier.unscaled": {
		"link": "",
		"content": "The value is added to the base value but are never multiplied by additive, unified, or multiplier factors.\n\n"

	},
	"dcei.engine.proto.BehaviorModifier.additive_factor": {
		"link": "",
		"content": "Increases the base value as a multiplier.\n\nWhen multiple sources of additive factors are applied, they combine additively (Ex: `+0.5` + `+0.25` = `+0.75`).\n\n"

	},
	"dcei.engine.proto.BehaviorModifier.unified_factor": {
		"link": "",
		"content": "Increases the base value as a multiplier.\n\nWhen multiple sources of unified factors are applied, only the highest positive value and lowest negative value are used (Ex: `+0.5` + `+0.25` = `+0.5`).\n\n"

	},
	"dcei.engine.proto.BehaviorModifier.multiplier_factor": {
		"link": "",
		"content": "Increases the base value as a multiplier.\n\nWhen multiple sources of multiplier factors are applied, they combine multiplicatively (Ex: `+0.5` + `+0.25` = `+0.875`).\n\n"

	},
	"dcei.engine.proto.Effect.add_gold": {
		"link": "",
		"content": "Give gold to a player.\n\n"

	},
	"dcei.engine.proto.EffectAddGold.amount": {
		"link": "",
		"content": "The amount of gold to add.\n\n"

	},
	"dcei.engine.proto.EffectAddGold.target": {
		"link": "",
		"content": "Which unit's owner to give gold to. Using NONE defaults to TARGET_UNIT. NONE is TARGET_UNIT\n\n"

	},
	"dcei.engine.proto.EffectAddGold.display_in_ui": {
		"link": "",
		"content": "If checked, will create UI ingame when the effect is created.\n\n"

	},
	"dcei.engine.proto.Effect.apply_behavior": {
		"link": "",
		"content": "Applies a Behavior to a unit.\n\n"

	},
	"dcei.engine.proto.EffectApplyBehavior.behavior": {
		"link": "",
		"content": "The behavior to apply.\n\n"

	},
	"dcei.engine.proto.EffectApplyBehavior.target": {
		"link": "",
		"content": "Which unit to apply the behavior to. Using NONE defaults to TARGET_UNIT. NONE is TARGET_UNIT\n\n"

	},
	"dcei.engine.proto.EffectApplyBehavior.stack_count": {
		"link": "",
		"content": "The number of behavior stacks to apply. If set to 0, 1 stack count will be added.\n\n"

	},
	"dcei.engine.proto.EffectApplyBehavior.stack_count_expressions": {
		"link": "",
		"content": "The evaluated [expressions](Data-Expression) will be added to the effect's [Stack Count](#stack-count).\n\n"

	},
	"dcei.engine.proto.EffectApplyBehavior.duration": {
		"link": "",
		"content": "If set, this will be used instead of the behavior's duration.\n\n"

	},
	"dcei.engine.proto.EffectApplyBehavior.extend_duration": {
		"link": "",
		"content": "If checked, the duration will be added to the existing behavior on the target.\n\n"

	},
	"dcei.engine.proto.EffectApplyBehavior.expressions": {
		"link": "",
		"content": "The evaluated [expressions](Data-Expression) will be added to the effect's [Duration](#duration).\n\n"

	},
	"dcei.engine.proto.EffectApplyBehavior.retain_caster": {
		"link": "",
		"content": "If checked, the effects created by the applied behavior will use the caster of this effect as the caster reference. By default, behaviors will use their target unit as the caster reference. This is useful for making colliding projectiles that deal damage using a damage expression that references behaviors or tags on the caster.\n\n"

	},
	"dcei.engine.proto.Effect.apply_simple_mover": {
		"link": "",
		"content": "Apply a simple mover to a simple unit\n\n"

	},
	"dcei.engine.proto.EffectApplySimpleMover.type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Effect.apply_tag": {
		"link": "",
		"content": "Applies a local Tag to a unit within the given effect tree. Tags are arbitrary counters that can be referenced by Expressions and Validators\n\nThis can be used to prevent periodic search effect from damaging a unit multiple times by excluding it from future searches when combined with a validator.\n\n"

	},
	"dcei.engine.proto.EffectApplyTag.which_unit": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectApplyTag.tag_name": {
		"link": "",
		"content": "The tag reference.\n\n"

	},
	"dcei.engine.proto.EffectApplyTag.duration": {
		"link": "",
		"content": "The duration of the tag. Use -1 to make the duration infinite.\n\n"

	},
	"dcei.engine.proto.EffectApplyTag.stack_count": {
		"link": "",
		"content": "The number of stacks of the tag to apply.\n\n"

	},
	"dcei.engine.proto.Effect.area_search": {
		"link": "",
		"content": "Searches an area and applies effects to found targets.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.debug_draw": {
		"link": "",
		"content": "When checked, shows the area of this search effect in-game.\n\nUseful for debugging effects.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.distance_check_mode": {
		"link": "dcei.engine.proto.DistanceCheckModes",
		"content": "Determines whether to consider unit radius or center point when finding targets.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.distance_extend_mode": {
		"link": "dcei.engine.proto.DistanceExtendModes",
		"content": "Determines whether to extend the search radius by the source unit's radius.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.area_search_type": {
		"link": "dcei.engine.proto.AreaSearchType",
		"content": "Determines whether to search in a circle, arc, rectangle, or the source unit's children units.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.max_unit_count": {
		"link": "",
		"content": "The maximum number of units that will be found by the search.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.caster": {
		"link": "dcei.engine.proto.EffectAreaSearch.IncludeFlags",
		"content": "Whether to automatically include or exclude the effect caster.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.source": {
		"link": "dcei.engine.proto.EffectAreaSearch.IncludeFlags",
		"content": "Whether to automatically include or exclude the effect source.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.target": {
		"link": "dcei.engine.proto.EffectAreaSearch.IncludeFlags",
		"content": "Whether to automatically include or exclude the effect target.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.filter": {
		"link": "dcei.engine.proto.SearchFilter",
		"content": "Parameters for which targets are valid for the search.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.validators": {
		"link": "",
		"content": "Targets must pass these validators to be considered valid targets.\n\nSee: [Data/Validator](Data-Validator).\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.required_tag_names": {
		"link": "",
		"content": "If set, units must have these tags to be considered valid targets.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.excluded_tag_names": {
		"link": "",
		"content": "If set, units with these tags will be excluded from the search.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.effect": {
		"link": "",
		"content": "The effect created on targets found by the search.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.missing_effect": {
		"link": "",
		"content": "This effect is created if the number of targets found is less than the Max Unit Count (if set). This effect is created for each missing target. Ex: if the Max Unit Count is 3 but only 1 target is found, then the Effect will executed once on the target and the Missing Effect will be executed twice at the search location.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.repeated_target_cooldown": {
		"link": "",
		"content": "When set, targets found by this search effect will be excluded from other instances of this search effect within its effect tree for the duration. This is useful for making abilities with overlapping search effects where you only want to hit each target once.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.location": {
		"link": "",
		"content": "Where the search is created.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.use_source_facing": {
		"link": "",
		"content": "If checked, the search's facing will be set to the source unit's facing (before facing adjustment is applied).\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.facing_adjustment": {
		"link": "",
		"content": "The angle to offset the search's facing by.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.offset_start": {
		"link": "",
		"content": "Used in combination with Offset End to determine the facing of this effect. If both are set to a unit, the effect will use that unit's facing.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.offset_end": {
		"link": "",
		"content": "Used in combination with Offset Start to determine the facing of this effect. If both are set to a unit, the effect will use that unit's facing.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.offset": {
		"link": "dcei.engine.proto.EffectOffset",
		"content": "The offset coordinates for this effect.\n\n"

	},
	"dcei.engine.proto.Effect.attach_unit": {
		"link": "",
		"content": "Attach two units.\n\nYou can use AttachUnit to attach a [\"Simple\"](https://funovus.notion.site/Simple-Units-Introduction-8a39c47f07d64f4c9549c5947c2c281f) unit to a \"Normal\" unit. It's bridge for Simple/Complex units working together.\n\n"

	},
	"dcei.engine.proto.EffectAttachUnit.parent_unit": {
		"link": "",
		"content": "Which unit is parent.\n\n"

	},
	"dcei.engine.proto.EffectAttachUnit.child_unit": {
		"link": "",
		"content": "Which unit is child.\n\n"

	},
	"dcei.engine.proto.EffectAttachUnit.use_child_facing": {
		"link": "",
		"content": "When set, child unit will use it's own rotation instead of locked to host's rotation.\n\n"

	},
	"dcei.engine.proto.EffectAttachUnit.attach_offset": {
		"link": "",
		"content": "Offset between the parent and child unit.\n\n"

	},
	"dcei.engine.proto.EffectAttachUnit.AttachOffset.oneof_offset_type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectAttachUnit.AttachOffset.type": {
		"link": "",
		"content": "Sets the orientation the offset is relative to.\n\n**PARENT_ORIENTATION**:  Orientation is relative to the direction from parent unit's facing.\n\n**WORLD_ORIENTATION**:  Orientation is relative to world facing (i.e., north).\n\n"

	},
	"dcei.engine.proto.Effect.consume_mana": {
		"link": "",
		"content": "Reduces mana of a unit.\n\n"

	},
	"dcei.engine.proto.EffectConsumeMana.amount": {
		"link": "",
		"content": "The amount of mana to consume.\n\n"

	},
	"dcei.engine.proto.EffectConsumeMana.target": {
		"link": "",
		"content": "Which unit to consume mana from. Using NONE defaults to TARGET_UNIT. NONE is TARGET_UNIT\n\n"

	},
	"dcei.engine.proto.Effect.damage": {
		"link": "",
		"content": "Applies damage to a unit.\n\n"

	},
	"dcei.engine.proto.EffectDamage.which_unit": {
		"link": "",
		"content": "Which unit to apply damage to.\n\n"

	},
	"dcei.engine.proto.EffectDamage.damage_amount": {
		"link": "",
		"content": "The amount of damage to deal.\n\n"

	},
	"dcei.engine.proto.EffectDamage.expressions": {
		"link": "",
		"content": "The result of each expression listed here will be evaluated and added to the damage amount. The total damage amount will then be passed through any behavior modifiers or damage responses.\n\nSee: [Data/Expression](Data-Expression).\nNote that the expression's [Value/DamageAmount](Data-Expression#damage-amount) refers to the Damage Amount of this effect.\n\n"

	},
	"dcei.engine.proto.EffectDamage.expressions_after_behavior_modifiers": {
		"link": "",
		"content": "The damage value after behavior modifiers are applied will be used when evaulating this expression and the combined value will be used to further apply damage responses.\n\n"

	},
	"dcei.engine.proto.EffectDamage.expressions_after_damage_response": {
		"link": "",
		"content": "The damage value after damage responses are applied will be used when evaluating this expression and the result will be added to the damage value.\n\n"

	},
	"dcei.engine.proto.EffectDamage.card_name": {
		"link": "",
		"content": "Name of the card this damage effect is associated with. Used for reporting in-game stats.\n\n"

	},
	"dcei.engine.proto.Effect.detach_unit": {
		"link": "",
		"content": "Detach two units.\n\n"

	},
	"dcei.engine.proto.EffectDetachUnit.which_unit": {
		"link": "",
		"content": "Which unit to detach from parent.\n\n"

	},
	"dcei.engine.proto.Effect.disengage": {
		"link": "",
		"content": "Disengages a unit. Units with TD AI behaviors can become engaged (locked in combat) with enemy units and ignore waypoint movement.\n\nThis effect is used to remove engagement. The disengage effect can also be used to make a unit lose its current weapon target, which can be useful in some non-TD cases.\n\n"

	},
	"dcei.engine.proto.EffectDisengage.location": {
		"link": "",
		"content": "Which unit to disengage. If set to none, target unit will be used.\n\n"

	},
	"dcei.engine.proto.Effect.enumerate_unit_list": {
		"link": "",
		"content": "Uses a search effect to generate a list of units and runs effects on units in the list.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.oneof_location_mode": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectEnumerateUnitList.target_type": {
		"link": "",
		"content": "Used to determine the ability target type if this effect is the first effect of an ability.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.iteration_mode": {
		"link": "",
		"content": "Determines how to iterate through the unit list.\n\n[Step Count](#step-count)\n[validator](#validator)\n[Impact Effect](#impact-effect)\n\n**REPEAT**:  For each Step Count, check the validator and run the Impact Effect on the top unit of the list. If the validator fails, remove the top unit from the list and move on to the next unit in the list.\n\n**FALL_THROUGH**:  For each Step Count, check the validator and run the Impact Effect on the next unit in the list. The unit list is iterated through in sequence.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.repeat_list": {
		"link": "",
		"content": "When checked, the list will be iterated through on repeat until the step count is exhausted or no valid targets remain.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.step_count": {
		"link": "",
		"content": "The number of times to run the impact effect.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.step_count_expressions": {
		"link": "",
		"content": "The evaluated [expressions](Data-Expression) are added to [Step Count](#step-count).\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.validator": {
		"link": "",
		"content": "The [validator](Data-Validator) checked before running the [Impact Effect](#impact-effect). If the validator fails, the effect is not executed and the step is not counted.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.search_effect": {
		"link": "",
		"content": "The [Area Search](Data-Effect-Area-Search) effect used to generate the unit list. Typically this search should not have Effect or Missing Effect as it should only be used to generate a list of potential targets for the Enumerate Unit List effect.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.missing_effect": {
		"link": "",
		"content": "This effect is created if the number of units found by the [Search Effect](#search-effect) is less than the [Step Count](#step-count). This effect is created for each missing target.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.impact_effect": {
		"link": "",
		"content": "The effect run on the unit list each step that the [validator](#validator) passes.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.update_source_to_previous_target": {
		"link": "",
		"content": "If this is set, for the current iteration, the target of previous iteration will be used as the source for this iteration. E.g. Chain lighting\n\nUsed in combination with [Use Target Location](#location-mode) to update the search location (useful for creating chain lighting effects).\n\n"

	},
	"dcei.engine.proto.Effect.force": {
		"link": "",
		"content": "Applies a force to units in a target area.\n\n"

	},
	"dcei.engine.proto.EffectForce.oneof_force_type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectForce.location": {
		"link": "",
		"content": "Determines where the force effect is created. - If unit, the force effect will move along with the unit. If the associated unit is removed, the force effect will stay at its last position. - If location, the force effect will be created at that location. - If unit or location, unit will be selected first if available and if not location will be used.\n\n"

	},
	"dcei.engine.proto.EffectForce.offset_start": {
		"link": "",
		"content": "Used in combination with Offset End to determine the facing of this effect. If start & end is the same unit, the facing of that unit is used; if start & end is at the same point, facing of the source unit is used as a fallback and if source is not an unit, facing of the caster unit is used.\n\n"

	},
	"dcei.engine.proto.EffectForce.offset_end": {
		"link": "",
		"content": "Used in combination with Offset Start to determine the facing of this effect.\n\n"

	},
	"dcei.engine.proto.EffectForce.world_facing": {
		"link": "",
		"content": "When checked, the effect will ignore Offset Start/End and instead use world grid facing.\n\n"

	},
	"dcei.engine.proto.EffectForce.facing_adjustment": {
		"link": "",
		"content": "Offset in degrees added (clockwise) to the effect's facing.\n\n"

	},
	"dcei.engine.proto.EffectForce.search_area": {
		"link": "dcei.engine.proto.AreaSearchType",
		"content": "The target area that will be affected by the force.\n\n"

	},
	"dcei.engine.proto.EffectForce.search_filter": {
		"link": "dcei.engine.proto.SearchFilter",
		"content": "Parameters for which units are affected by the force.\n\n"

	},
	"dcei.engine.proto.EffectForce.duration": {
		"link": "",
		"content": "How long the effect lasts in seconds.\n\n"

	},
	"dcei.engine.proto.EffectForce.duration_expressions": {
		"link": "",
		"content": "Any expressions here will be evaluated and added to the **duration** when the force effect is created.\n\n"

	},
	"dcei.engine.proto.EffectForce.speed": {
		"link": "",
		"content": "The distance to travel per second for units affected by the force.\n\n"

	},
	"dcei.engine.proto.EffectForce.speed_expressions": {
		"link": "",
		"content": "Any expressions here will be evaluated and added to the **speed** when the force effect is created.\n\n"

	},
	"dcei.engine.proto.EffectForce.validators": {
		"link": "",
		"content": "If set, only targets pass these validators will be affected by the force.\n\n"

	},
	"dcei.engine.proto.EffectForce.debug_draw": {
		"link": "",
		"content": "When checked, shows the area of this force effect in-game.\n\n"

	},
	"dcei.engine.proto.Effect.heal": {
		"link": "",
		"content": "Heals a unit.\n\n"

	},
	"dcei.engine.proto.EffectHeal.which_unit": {
		"link": "",
		"content": "Which unit to heal.\n\n"

	},
	"dcei.engine.proto.EffectHeal.value_type": {
		"link": "dcei.engine.proto.ValueType",
		"content": "Whether to heal a percentage of the target's health or an explicit amount.\n\n"

	},
	"dcei.engine.proto.EffectHeal.heal_amount": {
		"link": "",
		"content": "The amount to heal.\n\n"

	},
	"dcei.engine.proto.EffectHeal.expressions": {
		"link": "",
		"content": "The evaluated [expressions](Data-Expression) are added to the heal amount.\n\n"

	},
	"dcei.engine.proto.EffectHeal.card_name": {
		"link": "",
		"content": "Name of the card this heal effect is associated with. Used for reporting in-game stats.\n\n"

	},
	"dcei.engine.proto.Effect.issue_ability": {
		"link": "",
		"content": "Orders a unit to cast an ability.\n\n"

	},
	"dcei.engine.proto.EffectIssueAbility.oneof_ability_reference": {
		"link": "",
		"content": "Determines whether ability is referenced by name or tag.\n\n"

	},
	"dcei.engine.proto.EffectIssueAbility.ability_caster": {
		"link": "",
		"content": "Which unit to issue an ability order to.\n\n"

	},
	"dcei.engine.proto.EffectIssueAbility.ability_target": {
		"link": "",
		"content": "Which unit should be the target of the ability.\n\n"

	},
	"dcei.engine.proto.EffectIssueAbility.ignore_cost": {
		"link": "",
		"content": "If checked, the ability won't use cost or cooldown when casting.\n\n"

	},
	"dcei.engine.proto.Effect.issue_command": {
		"link": "",
		"content": "Issues move or attack commands to a unit.\n\n"

	},
	"dcei.engine.proto.EffectIssueCommand.type": {
		"link": "",
		"content": "**NONE**:  \n\n**MOVE_TO_LOCATION**:  The unit will be ordered to move to the location.\n\n**ATTACK_TO_LOCATION**:  The unit will be ordered to attack move to the location.\n\n**ATTACK_UNIT**:  The unit will be ordered to attack the target unit.\n\n"

	},
	"dcei.engine.proto.EffectIssueCommand.which_unit": {
		"link": "",
		"content": "Which unit to give the move or attack order to.\n\n"

	},
	"dcei.engine.proto.EffectIssueCommand.target_unit": {
		"link": "",
		"content": "Which unit to attack when using **Attack Unit**.\n\n"

	},
	"dcei.engine.proto.EffectIssueCommand.target_location": {
		"link": "",
		"content": "Which location to use when using **Move To Location** or **Attack To Location**.\n\n"

	},
	"dcei.engine.proto.EffectIssueCommand.target_offset": {
		"link": "dcei.engine.proto.EffectOffset",
		"content": "Offset used for the target location if type is location.\n\n"

	},
	"dcei.engine.proto.EffectIssueCommand.target_offset_start": {
		"link": "",
		"content": "Offset start & end together determines the orientation of the offset.\nIf offset start & end are both specified but are overlapping, and the offset start is an unit (e.g., caster unit), the facing of that unit will be used.\nIf offset start & end are not specified, or specified but cannot determine the facing using the above rules, the commanded unit's facing will be used.\n\n"

	},
	"dcei.engine.proto.EffectIssueCommand.target_offset_end": {
		"link": "",
		"content": "Used in combination with Offset Start to determine the facing of this effect. If both are set to a unit, the effect will use that unit's facing.\n\n"

	},
	"dcei.engine.proto.Effect.kill": {
		"link": "",
		"content": "Kills the target unit.\n\n"

	},
	"dcei.engine.proto.EffectKill.which_unit": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Effect.launch_missile": {
		"link": "",
		"content": "Launches a missile unit at a target unit or location.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.target_type": {
		"link": "",
		"content": "Determines the target type for the effect.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.missile_unit": {
		"link": "",
		"content": "The type of Unit used as a missile. If set to **None**, the unit specified in launch location will be used (typically caster or target, useful to create knockback effects).\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.missile_death_type": {
		"link": "",
		"content": "Determines what happens to the missile unit on impact.\n\n**IMPACT**:  The missile unit will be removed on impact.\n\n**NONE**:  The missile unit will persist after impact (useful for knockback effects).\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.start_effect": {
		"link": "",
		"content": "The effect created when the missile is launched.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.impact_effect": {
		"link": "",
		"content": "The effect created when the missile impacts its target.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.launch_location": {
		"link": "",
		"content": "Where the missile will be launched from.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.impact_location": {
		"link": "",
		"content": "Where the missile will impact.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.offset_start": {
		"link": "",
		"content": "Offset start & end together determines the \"facing\" of this effect. This facing will be used to interpret offsets and also will be used as the initial facing of the created missile unit.\nIf offset start & end are both set to non-none values and the specified locations don't overlap, the effect will face from start to end.\nIf offset start & end are both specified but are overlapping, and the offset start is an unit (e.g., caster unit), the facing of that unit will be used.\nIf offset start & end are not specified, or specified but cannot determine the facing using the above rules, the facing will be determined by launch & impact location instead using the same rules as above.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.offset_end": {
		"link": "",
		"content": "Used in combination with Offset Start to determine the facing of this effect. If both are set to a unit, the effect will use that unit's facing.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.launch_offset": {
		"link": "dcei.engine.proto.EffectOffset",
		"content": "The offset coordinates for the missile's launch location. Offsets are relative to the effect's facing.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.impact_offset": {
		"link": "dcei.engine.proto.EffectOffset",
		"content": "The offset coordinates for the missile's impact location. Offsets are relative to the effect's facing.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.use_missile_height_at_destination": {
		"link": "",
		"content": "When checked, the missile unit's height will be considered when when calculating the impact location.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.missile_effect": {
		"link": "",
		"content": "The effect applied to the missile when it's created.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.mover": {
		"link": "",
		"content": "The mover that determines how the missile will travel.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.area_search_effect": {
		"link": "",
		"content": "Tie a Search effect to a missile unit, which will apply every update\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.simple_area_search_effect": {
		"link": "",
		"content": "Tie a Simple Search Effect to a missile unit, which will apply every update\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.arrive_on_search_hit": {
		"link": "",
		"content": "This flag specifies if the Missile counts as \"HitTarget\" (reached it's destination) if the missile \"Search Effect\" finds a target.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.dynamic_search_area": {
		"link": "",
		"content": "If set, if the search effect is a rectangular search, the length will automatically extend to make sure there are no gaps in the search radiuses, based on the speed of the projectile.\n\n"

	},
	"dcei.engine.proto.EffectLaunchMissile.unique_targets_only": {
		"link": "",
		"content": "If set, this search effect will only impact a target once per source. E.g., enabling this would prevent a target from being hit multiple times from different instances of a search effect originating from a single missile.\n\n"

	},
	"dcei.engine.proto.Effect.modify_ugprade_level": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectModifyUpgradeLevel.name": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectModifyUpgradeLevel.modify_type": {
		"link": "",
		"content": "**SET**:  \n\n**ADD**:  \n\n"

	},
	"dcei.engine.proto.EffectModifyUpgradeLevel.level": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectModifyUpgradeLevel.level_expressions": {
		"link": "",
		"content": "Any expressions here will be evaluated and added to the **level** when the effect is created.\n\n"

	},
	"dcei.engine.proto.Effect.modify_unit": {
		"link": "",
		"content": "Modifies properties on a unit such as mana, shield, or ability cooldown.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.oneof_modify_unit_type": {
		"link": "",
		"content": "Which unit property to modify.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.which_unit": {
		"link": "",
		"content": "Which unit to modify\n\n"

	},
	"dcei.engine.proto.Effect.modify_upgrade_level": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Effect.morph_troop": {
		"link": "",
		"content": "Similar to Morph effect but retains unit parent-child relationship.\n\n"

	},
	"dcei.engine.proto.EffectMorphTroop.target_unit": {
		"link": "",
		"content": "The type of unit to morph into.\n\n"

	},
	"dcei.engine.proto.EffectMorphTroop.parameters": {
		"link": "dcei.engine.proto.MorphParameters",
		"content": ""

	},
	"dcei.engine.proto.Effect.morph": {
		"link": "",
		"content": "Turns a unit into another unit type.\n\n"

	},
	"dcei.engine.proto.EffectMorph.which_unit": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectMorph.target_unit": {
		"link": "",
		"content": "The type of unit to morph into.\n\n"

	},
	"dcei.engine.proto.EffectMorph.parameters": {
		"link": "dcei.engine.proto.MorphParameters",
		"content": ""

	},
	"dcei.engine.proto.Effect.persistent": {
		"link": "",
		"content": "Creates and sequences additional effects.\n\nCan be used to create multiple effects over time and/or with offsets.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.periodic_count": {
		"link": "",
		"content": "The number of periodic effects to create.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.start_effect": {
		"link": "",
		"content": "The effect created when the persistent is created, before the periodic effects.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.final_effect": {
		"link": "",
		"content": "The effect created when the persistent ends, after the periodic effects.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.location": {
		"link": "",
		"content": "Determines where the persistent effect is created. - If unit, the persistent effect will move along with the unit and effects created by the persistent will use the unit as the source. If the associated unit is removed, the persistent effect will stay at its last position. - If location, the persistent effect will be created at that location and effects created will use the location as their source. - If unit or location, unit will be selected first if available and if not location will be used.\n\nIf set to unit, but the unit doesn't exist (e.g. use `Target Unit` but the effect's target is a position), the persistent effect won't be created.\nIf set to location, but the the target is actually a unit (e.g. use `Target Location` but the effect's target is a unit), the unit's position will be used.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.offset_start": {
		"link": "",
		"content": "Used in combination with Offset End to determine the facing of this effect. If start & end is at the same point, facing of the source unit is used as a fallback and if source is not an unit, facing of the caster unit is used.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.offset_end": {
		"link": "",
		"content": "Used in combination with Offset Start to determine the facing of this effect. If start & end is at the same point, facing of the source unit is used as a fallback and if source is not an unit, facing of the caster unit is used.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.start_effect_offset": {
		"link": "dcei.engine.proto.EffectOffset",
		"content": "Offset coordinates for the start effect. Offsets are relative to the effect's facing.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.final_effect_offset": {
		"link": "dcei.engine.proto.EffectOffset",
		"content": "Offset coordinates for the final effect. Offsets are relative to the effect's facing.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.world_facing": {
		"link": "",
		"content": "When checked, the persistent will ignore Offset Start/End and instead use world grid facing. This is useful for certain game types such as an arcade shooter where projectiles always travel up.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.periodic_duration_select_mode": {
		"link": "dcei.engine.proto.EffectPersistent.SelectMode",
		"content": "Determines how the periodic duration, effect, or offset is selected.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.periodic_durations": {
		"link": "",
		"content": "The duration of each period.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.periodic_effect_select_mode": {
		"link": "dcei.engine.proto.EffectPersistent.SelectMode",
		"content": "Determines how the periodic duration, effect, or offset is selected.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.periodic_effects": {
		"link": "",
		"content": "The effects to run at the end of each period.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.periodic_offset_select_mode": {
		"link": "dcei.engine.proto.EffectPersistent.SelectMode",
		"content": "Determines how the periodic duration, effect, or offset is selected.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.periodic_effect_offsets": {
		"link": "dcei.engine.proto.EffectOffset",
		"content": "The offset used to create the periodic effects. Uses the effect's facing to determine offset facing.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.periodic_validators": {
		"link": "",
		"content": "All validators listed are checked each period and the periodic effect is only executed if all validators succeed.\n\nSee: [Data/Validator](Data-Validator).\n\n"

	},
	"dcei.engine.proto.EffectPersistent.terminate_on_periodic_effect_success": {
		"link": "",
		"content": "If checked, the persistent effect will be destroyed the first time the periodic validators succeed. The final effect will be executed when the persistent is terminated.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.terminate_on_periodic_effect_failure": {
		"link": "",
		"content": "If checked, the persistent effect will be destroyed the first time the periodic validators fail. The final effect will be executed when the persistent is terminated.\n\n"

	},
	"dcei.engine.proto.Effect.remove_behavior": {
		"link": "",
		"content": "Removes a Behavior from a unit.\n\n"

	},
	"dcei.engine.proto.EffectRemoveBehavior.behavior": {
		"link": "",
		"content": "The behavior to remove.\n\n"

	},
	"dcei.engine.proto.EffectRemoveBehavior.target": {
		"link": "",
		"content": "Which unit to remove the behavior from. Using NONE defaults to TARGET_UNIT. NONE is TARGET_UNIT\n\n"

	},
	"dcei.engine.proto.EffectRemoveBehavior.stack_count": {
		"link": "",
		"content": "How many stacks to remove. If set to 0, the behavior will be removed regardless of the existing stack count.\n\n"

	},
	"dcei.engine.proto.EffectRemoveBehavior.stack_count_expressions": {
		"link": "",
		"content": "The evaluated [expressions](Data-Expression) will be added to the effect's [Stack Count](#stack-count).\n\n"

	},
	"dcei.engine.proto.Effect.remove_tag": {
		"link": "",
		"content": "Removes one count of a local Tag within the given effect tree.\n\n"

	},
	"dcei.engine.proto.EffectRemoveTag.which_unit": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectRemoveTag.tag_name": {
		"link": "",
		"content": "The tag reference to remove.\n\n"

	},
	"dcei.engine.proto.EffectRemoveTag.stack_count": {
		"link": "",
		"content": "The number of stacks of the tag to remove. If set to 0, the tag will be removed regardless of the existing stack count.\n\n"

	},
	"dcei.engine.proto.Effect.remove": {
		"link": "",
		"content": "Removes a unit from the game.\n\nNote that this will immediately remove and destroy the unit's actor, unless the actor has the [Preserve On Unit Remove](Data-Actor-Unit-Actor#preserve-on-unit-remove) flag enabled. Removing a unit does not trigger on-death effects (such as triggers, damage response behaviors, or deatg response behaviors.)\n\n"

	},
	"dcei.engine.proto.EffectRemove.which_unit": {
		"link": "",
		"content": "Which unit to remove.\n\n"

	},
	"dcei.engine.proto.Effect.sell": {
		"link": "",
		"content": "Destroys a unit and refunds the cost to the owner.\n\n"

	},
	"dcei.engine.proto.EffectSell.value_type": {
		"link": "dcei.engine.proto.ValueType",
		"content": "Whether to refund a percentage of the target's cost or an explicit amount.\n\n"

	},
	"dcei.engine.proto.EffectSell.refund": {
		"link": "",
		"content": "The amount of gold to refund. If using percentage, 0.5 means 50%.\n\n"

	},
	"dcei.engine.proto.EffectSell.unit_cost_only": {
		"link": "",
		"content": "If checked, ignores modifications to the unit's cost from abilities (such as from [Abilities/Add To Unit Cost](Data-Ability#add-to-unit-cost)).\n\n"

	},
	"dcei.engine.proto.Effect.set_bounty_": {
		"link": "",
		"content": "Sets the amount of gold a unit drops when it's killed.\n\n"

	},
	"dcei.engine.proto.EffectSetBounty.which_unit": {
		"link": "",
		"content": "Which unit to apply the bounty to.\n\n"

	},
	"dcei.engine.proto.EffectSetBounty.amount": {
		"link": "",
		"content": "The amount of gold for the unit to drop when killed.\n\n"

	},
	"dcei.engine.proto.Effect.set_rally_point": {
		"link": "",
		"content": "Sets the rally point for child units, such as TD_Troop spawned via [Effects/Spawn Troop](Data-Effect-Spawn-Troop).\n\n"

	},
	"dcei.engine.proto.EffectSetRallyPoint.which_unit": {
		"link": "",
		"content": "Which unit to set rally point. For barracks tower, this should be the tower.\n\n"

	},
	"dcei.engine.proto.EffectSetRallyPoint.location": {
		"link": "",
		"content": "The location of the new rally point on the ground to set to.\n\n"

	},
	"dcei.engine.proto.Effect.set_waypoints": {
		"link": "",
		"content": "Sets the waypoint path for TD_Creep or Generic Controllable units.\n\n"

	},
	"dcei.engine.proto.EffectSetWaypoints.target": {
		"link": "",
		"content": "Which unit to set waypoints for.\n\n"

	},
	"dcei.engine.proto.EffectSetWaypoints.waypoints": {
		"link": "",
		"content": "Which method is used for setting waypoints.\n\n"

	},
	"dcei.engine.proto.EffectSetWaypoints.Waypoints.oneof_waypoints_type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectSetWaypoints.dispersal_offset": {
		"link": "",
		"content": "Sets the waypoints offset across the lane width (0 = left edge, 1 = right edge).\n\n"

	},
	"dcei.engine.proto.EffectSetWaypoints.dispersal_offset_range": {
		"link": "",
		"content": "A random number between this and 0 will be added to the dispersal offset.\n\n"

	},
	"dcei.engine.proto.EffectSetWaypoints.use_natural_dispersal": {
		"link": "",
		"content": "If checked, determine dispersal automatically from unit's current position.\n\n"

	},
	"dcei.engine.proto.EffectSetWaypoints.ignore_rally_disabled_lanes": {
		"link": "",
		"content": "When checked, lanes marked as \"Disable Rally\" as valid waypoints.\n\n"

	},
	"dcei.engine.proto.Effect.set": {
		"link": "",
		"content": "Executes a list of effects.\n\n"

	},
	"dcei.engine.proto.EffectSet.target_type": {
		"link": "",
		"content": "Used to determine the ability target type if this effect is the first effect of an ability.\n\n"

	},
	"dcei.engine.proto.EffectSet.effect_list": {
		"link": "",
		"content": "The set of effects to create. Effects are executed in order from top to bottom.\n\n"

	},
	"dcei.engine.proto.Effect.simple_area_search": {
		"link": "",
		"content": "Searches an area and applies effects to found simple units.\n\nFor more info about simple units, see [Simple Units Guide.](https://funovus.notion.site/Simple-Units-Introduction-8a39c47f07d64f4c9549c5947c2c281f)\n\n"

	},
	"dcei.engine.proto.EffectSimpleAreaSearch.debug_draw": {
		"link": "",
		"content": "When checked, shows the area of this search effect in-game.\n\n"

	},
	"dcei.engine.proto.EffectSimpleAreaSearch.area_search_type": {
		"link": "dcei.engine.proto.AreaSearchType",
		"content": "Determines whether to search in a circle, arc, rectangle, or the source unit's children units.\n\n"

	},
	"dcei.engine.proto.EffectSimpleAreaSearch.max_unit_count": {
		"link": "",
		"content": "The maximum number of units that will be found by the search.\n\n"

	},
	"dcei.engine.proto.EffectSimpleAreaSearch.filter": {
		"link": "",
		"content": "Parameters for which targets are valid for the search.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.primary_sort_keys": {
		"link": "dcei.engine.proto.SimpleSearchFilter.SearchFilterSort",
		"content": "Potential targets are sorted based on these parameters.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.secondary_sort_keys": {
		"link": "dcei.engine.proto.SimpleSearchFilter.SearchFilterSort",
		"content": "If a pair of targets have the same priority value due to Primary Sort Keys, this sort key is then used to determine which unit to target.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.player": {
		"link": "dcei.engine.proto.SimpleSearchFilter.Flag",
		"content": "Targets owned by the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.ally": {
		"link": "dcei.engine.proto.SimpleSearchFilter.Flag",
		"content": "Targets owned by an ally of the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.enemy": {
		"link": "dcei.engine.proto.SimpleSearchFilter.Flag",
		"content": "Targets owned by an enemy of the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.neutral": {
		"link": "dcei.engine.proto.SimpleSearchFilter.Flag",
		"content": "Targets that are neutral to the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.is_simple_unit": {
		"link": "dcei.engine.proto.SimpleSearchFilter.Flag",
		"content": "Targets that are simple units will match the filter.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.has_simple_health": {
		"link": "dcei.engine.proto.SimpleSearchFilter.Flag",
		"content": "Targets that have simple health components will match the filter.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.has_simple_collision": {
		"link": "dcei.engine.proto.SimpleSearchFilter.Flag",
		"content": "Targets that have simple collision components will match the filter.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.has_simple_mover": {
		"link": "dcei.engine.proto.SimpleSearchFilter.Flag",
		"content": "Targets that have simple mover components will match the filter.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.has_simple_mass": {
		"link": "dcei.engine.proto.SimpleSearchFilter.Flag",
		"content": "Targets that have simple mass components will match the filter.\n\n"

	},
	"dcei.engine.proto.EffectSimpleAreaSearch.distance_check_mode": {
		"link": "dcei.engine.proto.DistanceCheckModes",
		"content": "Determines whether to consider unit radius or center point when finding targets.\n\n"

	},
	"dcei.engine.proto.EffectSimpleAreaSearch.effect": {
		"link": "",
		"content": "The effect created on targets found by the search.\n\n"

	},
	"dcei.engine.proto.EffectSimpleAreaSearch.missing_effect": {
		"link": "",
		"content": "This effect is created if the number of targets found is less than the Max Unit Count (if set). This effect is created for each missing target. Ex: if the Max Unit Count is 3 but only 1 target is found, then the Effect will executed once on the target and the Missing Effect will be executed twice at the search location.\n\n"

	},
	"dcei.engine.proto.Effect.simple_damage": {
		"link": "",
		"content": "Deal damage to simple unit targets\n\nFor more info about simple units, see [Simple Units Guide.](https://funovus.notion.site/Simple-Units-Introduction-8a39c47f07d64f4c9549c5947c2c281f)\n\n"

	},
	"dcei.engine.proto.EffectSimpleDamage.damage_value": {
		"link": "",
		"content": "The amount of damage to target.\n\n"

	},
	"dcei.engine.proto.EffectSimpleDamage.style_index": {
		"link": "",
		"content": "Index of the registered simple damage number style that would be used for this damage\n\n"

	},
	"dcei.engine.proto.Effect.simple_force": {
		"link": "",
		"content": "Force a simple unit or normal unit to move horizontally or\n\nFor more info about simple units, see [Simple Units Guide.](https://funovus.notion.site/Simple-Units-Introduction-8a39c47f07d64f4c9549c5947c2c281f)\n\n"

	},
	"dcei.engine.proto.EffectSimpleForce.force_source_location": {
		"link": "",
		"content": "Force direction is from this location to target unit location\n\n"

	},
	"dcei.engine.proto.EffectSimpleForce.horizontal_force": {
		"link": "",
		"content": "Positive value push targets away, negative values pull targets closer\n\n"

	},
	"dcei.engine.proto.EffectSimpleForce.horizontal_friction": {
		"link": "",
		"content": "Horizontal force will be subtracted by this value per second\n\n"

	},
	"dcei.engine.proto.EffectSimpleForce.vertical_force": {
		"link": "",
		"content": "Positive value lift targets up, negative values drag targets down\n\n"

	},
	"dcei.engine.proto.EffectSimpleForce.vertical_friction": {
		"link": "",
		"content": "Vertical force will be subtracted by this value per second\n\n"

	},
	"dcei.engine.proto.EffectSimpleForce.duration": {
		"link": "",
		"content": "How long this effect lasts in seconds\n\n"

	},
	"dcei.engine.proto.EffectSimpleForce.only_trigger_on_kill": {
		"link": "",
		"content": "When checked, this force will only trigger if the target is killed in the same frame\n\n"

	},
	"dcei.engine.proto.Effect.simple_movement_speed_modifier": {
		"link": "",
		"content": "Applies a movement speed modifier to a simple unit\n\nFor more info about simple units, see [Simple Units Guide.](https://funovus.notion.site/Simple-Units-Introduction-8a39c47f07d64f4c9549c5947c2c281f)\n\n"

	},
	"dcei.engine.proto.EffectSimpleMovementSpeedModifier.modifier": {
		"link": "dcei.engine.proto.BehaviorModifier",
		"content": ""

	},
	"dcei.engine.proto.EffectSimpleMovementSpeedModifier.duration": {
		"link": "",
		"content": "How long the modifier will last in seconds\n\n"

	},
	"dcei.engine.proto.Effect.simple_spawn_around_unit": {
		"link": "",
		"content": "Spawn a simple unit around an anchor unit\n\n"

	},
	"dcei.engine.proto.EffectSimpleSpawnAroundUnit.orientation": {
		"link": "dcei.engine.proto.EffectSimpleSpawnAroundUnit.orientation",
		"content": "Orientation of the newly spawned unit, rotation in eular angle format\n\n"

	},
	"dcei.engine.proto.EffectSimpleSpawnAroundUnit.spawn_unit_type": {
		"link": "",
		"content": "Type registered with DCEI.RegisterSimpleUnitType\n\n"

	},
	"dcei.engine.proto.EffectSimpleSpawnAroundUnit.anchor_unit": {
		"link": "",
		"content": "Spawn around which unit\n\n"

	},
	"dcei.engine.proto.EffectSimpleSpawnAroundUnit.effect": {
		"link": "",
		"content": "Effect to apply on newly spawned unit Must be an effect that supports simple units\n\n"

	},
	"dcei.engine.proto.EffectSimpleSpawnAroundUnit.position_offset_absolute": {
		"link": "dcei.engine.proto.Double3",
		"content": "Position offset in world coordinate\n\n"

	},
	"dcei.engine.proto.EffectSimpleSpawnAroundUnit.position_offset_relative": {
		"link": "dcei.engine.proto.Double3",
		"content": "Position offset in the anchor unit local coordinate\n\n"

	},
	"dcei.engine.proto.Effect.simple_spawn": {
		"link": "",
		"content": "Spawn a simple unit around an anchor unit\n\n"

	},
	"dcei.engine.proto.EffectSimpleSpawn.spawn_unit_type": {
		"link": "",
		"content": "Type registered with DCEI.RegisterSimpleUnitType\n\n"

	},
	"dcei.engine.proto.EffectSimpleSpawn.effect": {
		"link": "",
		"content": "Effect to apply on newly spawned unit Must be an effect that supports simple units\n\n"

	},
	"dcei.engine.proto.EffectSimpleSpawn.location": {
		"link": "",
		"content": "Location for spawning unit\n\n"

	},
	"dcei.engine.proto.EffectLocation.base": {
		"link": "",
		"content": "Spawn at this location\n\n"

	},
	"dcei.engine.proto.EffectLocation.offset_absolute": {
		"link": "dcei.engine.proto.Double3",
		"content": "Position offset in world coordinate\n\n"

	},
	"dcei.engine.proto.EffectLocation.orientation_for_offset_relative": {
		"link": "dcei.engine.proto.EffectOrientation",
		"content": "Orientation for relative position offset\n\n"

	},
	"dcei.engine.proto.EffectLocation.offset_relative": {
		"link": "dcei.engine.proto.Double3",
		"content": "Relative position offset\n\n"

	},
	"dcei.engine.proto.EffectSimpleSpawn.orientation": {
		"link": "dcei.engine.proto.EffectOrientation",
		"content": "Orientation for spawnd unit\n\n"

	},
	"dcei.engine.proto.Effect.simple_vertical_force": {
		"link": "",
		"content": "Lift or drop simple units or normal units\n\n"

	},
	"dcei.engine.proto.EffectSimpleVerticalForce.force": {
		"link": "",
		"content": "Positive value lifts target up, negative value pulls target down\n\n"

	},
	"dcei.engine.proto.EffectSimpleVerticalForce.friction": {
		"link": "",
		"content": "Force will be subtracted by this value per second\n\n"

	},
	"dcei.engine.proto.EffectSimpleVerticalForce.duration": {
		"link": "",
		"content": "How long this effect lasts in seconds\n\n"

	},
	"dcei.engine.proto.EffectSimpleVerticalForce.only_trigger_when_killed": {
		"link": "",
		"content": "Only trigger this force effect when target is killed in the same frame\n\n"

	},
	"dcei.engine.proto.Effect.spawn_troop": {
		"link": "",
		"content": "Creates units as children of the caster. Note that this is generally for use within Wild Sky TD and interacts with TD-specific AI behaviors.\n\n"

	},
	"dcei.engine.proto.EffectSpawnTroop.unit": {
		"link": "",
		"content": "The type of unit to create.\n\n"

	},
	"dcei.engine.proto.EffectSpawnTroop.spawn_count": {
		"link": "",
		"content": "The number of units to create.\n\n"

	},
	"dcei.engine.proto.EffectSpawnTroop.max_count": {
		"link": "",
		"content": "If set, only up to this number of units will be created.\n\n"

	},
	"dcei.engine.proto.EffectSpawnTroop.offset": {
		"link": "",
		"content": "The offset for where the unit is created.\n\n"

	},
	"dcei.engine.proto.EffectSpawnTroop.spawn_at_rally_point": {
		"link": "",
		"content": "If checked, will create the units at the parent's rally point rather than the parent's location.\n\n"

	},
	"dcei.engine.proto.Effect.spawn": {
		"link": "",
		"content": "Creates units.\n\n"

	},
	"dcei.engine.proto.EffectSpawn.unit": {
		"link": "",
		"content": "The type of unit to create.\n\n"

	},
	"dcei.engine.proto.EffectSpawn.count": {
		"link": "",
		"content": "The number of units to create.\n\n"

	},
	"dcei.engine.proto.EffectSpawn.owner": {
		"link": "",
		"content": "Which unit's owner will be the owner for the spawned units.\n\n"

	},
	"dcei.engine.proto.EffectSpawn.owner_id": {
		"link": "",
		"content": "If specified (i.e., non-zero), this field will be used instead of the \"owner\" field.\n\n"

	},
	"dcei.engine.proto.EffectSpawn.location": {
		"link": "",
		"content": "Determines the position and facing of the spawned unit. If the specified location is not an unit, spawned units use the default facing (0).\n\n"

	},
	"dcei.engine.proto.EffectSpawn.offset_start": {
		"link": "",
		"content": "Offset start & end together determines the \"facing\" of this effect. This facing will be used to interpret offsets and also will be used as the initial facing of the created missile unit.\nIf offset start & end are both set to non-none values and the specified locations don't overlap, the effect will face from start to end.\nIf offset start & end are both specified but are overlapping, and the offset start is an unit (e.g., caster unit), the facing of that unit will be used.\n\n"

	},
	"dcei.engine.proto.EffectSpawn.offset_end": {
		"link": "",
		"content": "Used in combination with Offset Start to determine the facing of this effect. If both are set to a unit, the effect will use that unit's facing.\n\n"

	},
	"dcei.engine.proto.EffectSpawn.offset": {
		"link": "dcei.engine.proto.EffectOffset",
		"content": "Offset relative to the facing of the created unit.\n\n"

	},
	"dcei.engine.proto.EffectSpawn.facing_offset": {
		"link": "dcei.engine.proto.EffectOffset",
		"content": "Additional facing offset applied to the created unit. Note that this facing will be applied after position offset facing is applied.\n\n"

	},
	"dcei.engine.proto.EffectSpawn.effect": {
		"link": "",
		"content": "Effect applied to the spawned unit after they are spawned.\n\n"

	},
	"dcei.engine.proto.EffectSpawn.spawn_on_navmesh": {
		"link": "",
		"content": "If checked, the unit will be spawned at the nearest pathable location if the target location isn't pathable.\n\n"

	},
	"dcei.engine.proto.Effect.stop": {
		"link": "",
		"content": "Makes a unit stop moving and clears its current attack target.\n\n"

	},
	"dcei.engine.proto.EffectStop.which_unit": {
		"link": "",
		"content": "Which unit to stop.\n\n"

	},
	"dcei.engine.proto.Effect.switch_effect": {
		"link": "",
		"content": "Run different effects based on validators/conditions.\n\n"

	},
	"dcei.engine.proto.EffectSwitch.target_type": {
		"link": "",
		"content": "Used to determine the ability target type if this effect is the first effect of an ability.\n\n"

	},
	"dcei.engine.proto.EffectSwitch.cases": {
		"link": "",
		"content": "For each case (from top to bottom), check the Validator and execute the effect if the Validator succeeds. By default the switch ends when the first Validator passes.\n\n"

	},
	"dcei.engine.proto.EffectSwitch.EffectCase.effect": {
		"link": "",
		"content": "The effect to run if the validator passes.\n\n"

	},
	"dcei.engine.proto.EffectSwitch.EffectCase.validator": {
		"link": "",
		"content": "The [validator](Data-Validator) to check.\n\n"

	},
	"dcei.engine.proto.EffectSwitch.EffectCase.fall_through": {
		"link": "",
		"content": "If checked, the next case will be evaluated even if this case passes.\n\n"

	},
	"dcei.engine.proto.Effect.teleport_along_waypoint": {
		"link": "",
		"content": "Teleport a unit along its waypoint path.\n\nNote that this only works with units with waypoints, such as Generic Controllable that have been given waypoints with [Effect/Set Waypoints](Data-Effect-Set-Waypoints).\n\n"

	},
	"dcei.engine.proto.EffectTeleportAlongWaypoint.which_unit": {
		"link": "",
		"content": "Which unit to teleport.\n\n"

	},
	"dcei.engine.proto.EffectTeleportAlongWaypoint.distance": {
		"link": "",
		"content": "Distance along waypoints to teleport a unit.\n\n"

	},
	"dcei.engine.proto.EffectTeleportAlongWaypoint.distance_expressions": {
		"link": "",
		"content": "Any expressions here will be evaluated and added to the **distance** when the teleport along waypoint effect is created.\n\n"

	},
	"dcei.engine.proto.Effect.teleport": {
		"link": "",
		"content": "Teleport a unit instantly.\n\n"

	},
	"dcei.engine.proto.EffectTeleport.which_unit": {
		"link": "",
		"content": "Which unit to teleport.\n\n"

	},
	"dcei.engine.proto.EffectTeleport.to": {
		"link": "",
		"content": "Where to teleport the unit to.\n\n"

	},
	"dcei.engine.proto.EffectTeleport.offset_start": {
		"link": "",
		"content": "Offset start & end together determines the offset forward, right and up directions.\nIf start & end are same unit, forward direction will be that unit's orientation. If start & end are using target unit but effect is casted on target location, offset will be ignored. If start & end are different units, forward direction will be start--->end\n\n"

	},
	"dcei.engine.proto.EffectTeleport.offset_end": {
		"link": "",
		"content": "Used in combination with Offset Start to determine the facing of this effect. If both are set to a unit, the effect will use that unit's facing.\n\n"

	},
	"dcei.engine.proto.EffectTeleport.offset": {
		"link": "dcei.engine.proto.EffectOffset",
		"content": "Offset for the teleport destination.\n\n"

	},
	"dcei.engine.proto.Effect": {
		"link": "",
		"content": "Effects are the building blocks of abilities and weapons and can be used to launch missiles, perform searches, deal damage, and the like. Effects can be chained together to create complex ability sequences.\nFor example to create a fireball abilities that explodes and deals damage in an area, you can create an effect tree such as **Launch Missile** > **Area Search** > **Damage**. The effects can be configured so that the **Launch Missile** effect creates an **Area Search** on impact, which runs a **Damage** effect on enemy units within a small radius.\n# Effect Locations\nSome effects have a [Location](Data-Effect-Persistent#location) field which determines where the effect is created. For effects that can only occur on a unit (such as Damage or Apply Behavior) this field may be called [Which Unit]((Data-Effect-Damage#which-unit)) or [Target]((Data-Effect-Apply-Behavior#target)). Regardless of whether the target type is a unit or location, where the effect is created follows the same general semantics.\n### Unit\nIf the target type is unit and the specified unit isn't found, then the effect won't be executed.\n* **Target Unit**: The target unit of the previous effect, weapon, ability, or behavior.\n* **Source Unit**: The last unit involved in the effect tree (a previous target, spawned unit, or missile).\n* **Caster Unit**: The first unit involved in the effect tree (typically the unit that used the weapon or ability).\n### Location\nIf the target type is location but the target happens to be a unit, then the location of the unit will be used instead.\n* **Target Location**: The target location of the previous effect, weapon, ability, or behavior.\n* **Source Location**: The location of the previous effect in the effect tree.\n* **Caster Location**: The location of first unit involved in the effect tree.\n### Unit or Location\nIf the target type is unit or location, it will look for a unit first before falling back to a location.\n* **Target Unit or Location**: The target unit/location of the previous effect, weapon, ability, or behavior.\n* **Source Unit or Location**: The last unit/effect location in the effect tree.\n* **Caster Unit or Location**: The first unit/location involved in the effect tree.\n\n"

	},
	"dcei.engine.proto.Effect.oneof_effect_type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Effect.template": {
		"link": "GenericField.template",
		"content": ""

	},
	"dcei.engine.proto.Effect.parent": {
		"link": "GenericField.parent",
		"content": ""

	},
	"dcei.engine.proto.Effect.debug_log_context": {
		"link": "",
		"content": "When checked, prints the effect's caster/source/target info to the log.\n\n"

	},
	"dcei.engine.proto.Effect.universal_field_expressions": {
		"link": "",
		"content": "Universal Field Expressions allow you to set an expression for most fields in effects even when they wouldn’t ordinarily accept an expression. [See notion guide \"Universal Field Expressions\"](https://www.notion.so/funovus/Universal-Field-Expressions-1c8388c126e14bff83c1944ddbf8aea1)\n\n"

	},
	"dcei.engine.proto.UniversalFieldExpression.field_path": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.UniversalFieldExpression.expression": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ValidatorExpressions.Expression": {
		"link": "",
		"content": "Expressions are a powerful feature of the DreamEditor that allows you to write formulas and plug them into various fields of game data. They're useful for creating things like damage formulas, where certain weapon types (fire, nature, armored) will deal more or less damage to different \"armor\" types (water, earth, light) as arbitrarily defined with tags. [See notion guide \"Using Expressions.\"](https://www.notion.so/funovus/Using-Expressions-96418b963c274b5daa4e88ccab846d40)\nSimilar to [Validators](Data-Validator), expressions are evaluated and return a result. Expressions are more flexible as they can be configured to write user defined formulas, and unlike validators they can return numeric or boolean values depending on context. \nIn numeric cases, true is treated as `1` and false is treated as `0`. In boolean cases, non-zero numbers are treated as `true` and 0 is treated as `false`. Note that expressions can also be used as [validators](Data-Validator#expression).\nThe most common use case for expressions are for creating custom damage formulas, such as `damage = ([caster]STRENGTH * 10) - [target]ARMOR)`, where `STRENGTH` and `ARMOR` are arbitrary attributes defined as [tags](Data-Behavior#behavior-tag-array).\n**Supported Fields**\nExpressions can be plugged into a number of existing data fields and can also be used with data binding in [custom UI](Trigger-API-Reference-DCEI-Functions-Custom-UI#void-settextframetextexpressiontransform-text-string-content). These are the currently supported data fields:\n- [Behavior/PeriodicInterval](Data-Behavior#periodic-interval-expressions)\n- [Effect/ApplyBehavior/Duration](Data-Effect-Apply-Behavior#expressions)\n- [Effect/Damage/DamageAmount](Data-Effect-Damage#expressions)\n- [Effect/EnumerateUnitList/StepCount](Data-Effect-Enumerate-Unit-List#step-count-expressions)\n- [Effect/Heal/HealAmount](Data-Effect-Heal#expressions)\n- [Effect/ModifyUnit/ModifyMana/Amount](Data-Effect-Modify-Unit#modify-mana)\n- [Effect/ModifyUnit/ModifyShield/Amount](Data-Effect-Modify-Unit#modify-shield)\n- [Mover/Orbiting/Radius](Data-Mover-Orbiting#datamoverorbiting)\nAs of version 0.10.x and up, [Effects](Data-Effect) now have a universal field expression section where you can overwrite any numeric effect field with an expression by specifying its field path. The expression will be evaluated right before the effect is cast using the same caster/source/target info as passed to the effect itself.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.value": {
		"link": "",
		"content": "These are the types of values you can include or reference in expression formulas.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.constant": {
		"link": "",
		"content": "Returns a constant value.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.ConstantValue.bool_value": {
		"link": "",
		"content": "Returns true or false.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.ConstantValue.int32_value": {
		"link": "",
		"content": "Returns an integer value.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.ConstantValue.double_value": {
		"link": "",
		"content": "Returns a floating point number (with decimal).\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.random": {
		"link": "",
		"content": "Returns a random number between the min and max value.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.RandomValue.int32_value": {
		"link": "dcei.engine.proto.ValidatorExpressions.RangeInt",
		"content": "Returns an integer value.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.RandomValue.double_value": {
		"link": "dcei.engine.proto.ValidatorExpressions.RangeDouble",
		"content": "Returns a floating point number (with decimal).\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.damage_amount": {
		"link": "",
		"content": "The damage amount is multiplied by this value (default 0).\n\nReturns the literal [damage value](Data-Effect-Damage#damage-amount) when used within a [damage effect](Data-Effect-Damage#expressions).\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.DamageAmountValue.multiplier": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ValidatorExpressions.Value.heal_amount": {
		"link": "",
		"content": "The heal amount is multiplied by this value (default 0).\n\nReturns the literal [heal value](Data-Effect-Heal#heal-amount) when used within a [heal effect](Data-Effect-Heal#expressions).\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.HealAmountValue.multiplier": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ValidatorExpressions.Value.tag_count": {
		"link": "",
		"content": "Returns the tag count of a specific [tag](Data-Behavior#behavior-tag-array) on a unit.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.TagCount.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.TagCount.tag_name": {
		"link": "",
		"content": "Which tag is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.unit_level": {
		"link": "",
		"content": "Returns the [level](Data-Unit#level-unused) of a unit. Currently limited in usefulness.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.UnitLevel.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.ability_level": {
		"link": "",
		"content": "Returns the [level](Data-Ability#level-unused) of an ability. Currently limited in usefulness.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.AbilityLevel.ability": {
		"link": "",
		"content": "Which ablity is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.wildsky_upgrade_level": {
		"link": "",
		"content": "Returns the level of a wild sky upgrade.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.DataUpgradeLevel.data_upgrade": {
		"link": "",
		"content": "Which upgrade is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.upgrade_level": {
		"link": "",
		"content": "Returns the level of an upgrade.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.UpgradeLevel.upgrade": {
		"link": "",
		"content": "Which upgrade is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.remaining_path_distance": {
		"link": "",
		"content": "Returns the remaining path distance for a unit with [waypoints](Data-Effect-Set-Waypoints).\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.RemainingPathDistanceValue.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.unit_ability_cooldown": {
		"link": "",
		"content": "Returns the current cooldown remaining for an ability.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.UnitAbilityCooldown.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.UnitAbilityCooldown.ability": {
		"link": "",
		"content": "Which ablity is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.UnitAbilityCooldown.use_cooldown_period": {
		"link": "",
		"content": "When checked, the expression returns the total cooldown duration, rather than time remaining.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.health": {
		"link": "",
		"content": "Returns the current health of a unit.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.HealthValue.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.max_health": {
		"link": "",
		"content": "Returns the max health of a unit.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.MaxHealthValue.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.health_fraction": {
		"link": "",
		"content": "Returns the current health fraction of a unit.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.HealthFraction.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.mana": {
		"link": "",
		"content": "Returns the current mana of a unit.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.ManaValue.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.max_mana": {
		"link": "",
		"content": "Returns the max mana of a unit.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.MaxManaValue.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.mana_fraction": {
		"link": "",
		"content": "Returns the current mana fraction of a unit.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.ManaFraction.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.shield": {
		"link": "",
		"content": "Returns the current shields of a unit.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.ShieldValue.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.max_shield": {
		"link": "",
		"content": "Returns the max shields of a unit.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.MaxShieldValue.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.shield_fraction": {
		"link": "",
		"content": "Returns the current shield fraction of a unit.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.ShieldFraction.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.behavior_stack_count": {
		"link": "",
		"content": "Returns the current stack count of a behavior on a unit.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.BehaviorStackCountValue.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.BehaviorStackCountValue.behavior": {
		"link": "",
		"content": "Which behavior is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.behavior_elapsed_time": {
		"link": "",
		"content": "Returns the elapsed time that a behavior has been on a unit.\n\nNote that this duration is reset to 0 when the stack count is [refreshed](Data-Behavior#refresh-stack).\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.BehaviorElapsedTimeValue.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.BehaviorElapsedTimeValue.behavior": {
		"link": "",
		"content": "Which behavior is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.behavior_duration": {
		"link": "",
		"content": "Returns the duration that a behavior has been on a unit.\n\nReturns the maximum [duration](Data-Behavior#duration) of a behavior on a unit. Note that this duration is not extended when the stack count is [refreshed](Data-Behavior#refresh-stack).\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.BehaviorDurationValue.unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": "Which unit is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.BehaviorDurationValue.behavior": {
		"link": "",
		"content": "Which behavior is evaluated.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.add_expressions": {
		"link": "",
		"content": "Returns the sum of the listed expressions.\n\nFunctionally similar to [Add](#add) but used as an expression value rather than a top-level operator.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.effect_critical_hit": {
		"link": "",
		"content": "Returns 1 if the effect tree is the result of a critical hit with a [weapon](Data-Weapon#critical-effect) or [ability](Data-Ability#critical-effect).\nThis can be used to create [damage expressions](Data-Effect-Damage#expressions) that deal increased damage on critical hits. For example this psuedo-expression would cause a damage effect to deal 150% damage on critical hit. \n```\nMultiply( EffectCrticial * DamageAmount(1) * Constant(0.5) )\n```\nSwap out the constant for value derived from [tag count]((#tag-count)) to support dynamic critical hit damage multipliers.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Value.units_distance": {
		"link": "",
		"content": "Returns the distance between units.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.UnitsDistance.from_unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": ""

	},
	"dcei.engine.proto.ValidatorExpressions.UnitsDistance.to_unit": {
		"link": "dcei.engine.proto.ValidatorExpressions.UnitLocation",
		"content": ""

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.divide": {
		"link": "",
		"content": "Divide a value by another.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.multiply": {
		"link": "",
		"content": "Multiply multiple values together. Supports nested expressions.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.subtract": {
		"link": "",
		"content": "Subtract a value from another.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.add": {
		"link": "",
		"content": "Add multiple values together. Supports nested expressions.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.compare": {
		"link": "",
		"content": "Compares two values/expressions and returns true or false based on the result.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.logic_not": {
		"link": "",
		"content": "Returns the flipped value or expression (true becomes false, false becomes true).\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.logic_and": {
		"link": "",
		"content": "Returns true if all listed values/expressions are true.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.logic_or": {
		"link": "",
		"content": "Returns true if any listed values/expressions are true.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.named_expression": {
		"link": "",
		"content": "Used to reference another [expression](#dataexpression). This is useful for combining multiple expressions or breaking complex expressions into smaller abstractions.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.exponent": {
		"link": "",
		"content": "Returns value to the [power](https://en.wikipedia.org/wiki/Exponentiation) of another. Similar to the `^` operator in Lua.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.modulo": {
		"link": "",
		"content": "Returns the [remainder](https://en.wikipedia.org/wiki/Modulo_operation) of a value after being divided by another. Similar to the `%` operator in Lua.\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.Expression.if": {
		"link": "",
		"content": "Returns the sum of the **Values** expressions if the **Compare** condition returns true. Otherwise returns the same of the **Else Values** expressions.\n\n"

	},
	"dcei.engine.proto.Mover.ballistic": {
		"link": "dcei.engine.proto.BallisticMover",
		"content": "Moves the missile unit in a parabolic arc (like a thrown grenade).\n\nNote that the ballistic mover can use **flight time** or **speed** but not both.\n\n"

	},
	"dcei.engine.proto.Mover.guidance": {
		"link": "dcei.engine.proto.GuidanceMover",
		"content": "Moves the missile unit linearly towards the target with tracking (like a guided missile).\n\n"

	},
	"dcei.engine.proto.Mover.multi_stage": {
		"link": "",
		"content": "A mover with multiple stages and motion overlays.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.stages": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.MultiStageMover.MoverStage.oneof_motion_type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.MultiStageMover.MoverStage.exit_time": {
		"link": "",
		"content": "If set, the time in seconds after entering this stage to start to transition to the next stage. If neither exit_time nor exit_distance is set, the current stage will last indefinitely.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.MoverStage.exit_distance": {
		"link": "",
		"content": "If set, the travel distance after entering this stage to start to transition to the next stage. If neither exit_time nor exit_distance is set, the current stage will last indefinitely.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.MoverStage.transition_time": {
		"link": "",
		"content": "If set, the time in seconds to blend the current stage and the next stage while transitioning. If both transition_time and transition_distance are 0, the transition to the next stage will finish instantly.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.MoverStage.transition_distance": {
		"link": "",
		"content": "If set, the travel distance to blend the current stage and the next stage while transitioning. If both transition_time and transition_distance are 0, the transition to the next stage will finish instantly.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.MoverStage.motion_overlay_scales": {
		"link": "",
		"content": "The intensity of each motion overlay in this stage. It should have the same number of entries as the number of overlays. Missing entries are treated as 0.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.overlays": {
		"link": "",
		"content": "Motion overlays apply a pattern of movement (like a wave or spiral) on top of a mover's base motion.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.MotionOverlay.oneof_overlay_type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.MultiStageMover.MotionOverlay.scale_adjustment_speed": {
		"link": "",
		"content": "When the scale of the overlay needs to change to a new value (e.g., from the initial launch scale of 0 to the target scale in the first stage, or between stages with different scale values), how fast it adjusts. The speed is relative to the mover's moving speed. A speed of 1 means the scale changes by 1 when the mover travels by 1 terrain grid-unit distance.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.MotionOverlay.rotation": {
		"link": "dcei.engine.proto.ValueWithRangeAndExpression",
		"content": "Overlays apply offsets to the mover position on the x-z plane (i.e., parallel to the terrain plane) by default. Set this rotation value to rotate the offset plane around the moving direction. E.g., sine-wave overlay moves the missile left then right; a rotation value of 180 will flip the offset plane and make the missile go right first.\n\n"

	},
	"dcei.engine.proto.Mover.orbiting": {
		"link": "",
		"content": "Moves the missile in an orbit around the target.\n\n"

	},
	"dcei.engine.proto.OrbitingMover.orbit_speed_type": {
		"link": "",
		"content": "Determines whether the orbit speed is controlled by a flat speed or degrees per second.\n\n"

	},
	"dcei.engine.proto.OrbitingMover.bind_to_owner": {
		"link": "",
		"content": "When checked, the mover will be destroyed if the caster dies.\n\n"

	},
	"dcei.engine.proto.OrbitingMover.life_period": {
		"link": "",
		"content": "When set, the missile unit will die after this duration.\n\n"

	},
	"dcei.engine.proto.OrbitingMover.rotation_axis": {
		"link": "",
		"content": "Sets the axis of rotation for the orbit. The default axis is 0, 1, 0 for a clockwise rotation. An axis of 0, -1, 0 will create a counter-clockwise rotation.\n\n"

	},
	"dcei.engine.proto.Axis.x": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Axis.y": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Axis.z": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.OrbitingMover.radius": {
		"link": "",
		"content": "The radius of the orbit.\n\n"

	},
	"dcei.engine.proto.OrbitingMover.radius_expressions": {
		"link": "",
		"content": "If set, the evaluated expression will be added to the radius when the missile unit is launched.\n\n"

	},
	"dcei.engine.proto.Mover.sine_wave": {
		"link": "",
		"content": "Moves the missile in a wave pattern towards the target with tracking.\n\n"

	},
	"dcei.engine.proto.SineWaveMover.amplitude": {
		"link": "",
		"content": "The width of the wave. Positive values mean the wave will start from the left while negative values mean the wave will start from the right. If set to 0, there will be no wave motion.\n\n"

	},
	"dcei.engine.proto.SineWaveMover.peak_count": {
		"link": "",
		"content": "The number of peaks the wave will make between its origin and target. If set to 0, one peak will be used.\n\n"

	},
	"dcei.engine.proto.SineWaveMover.speed": {
		"link": "",
		"content": "The missile unit's speed, in terrain grid-units-per-second.\n\n"

	},
	"dcei.engine.proto.SineWaveMover.speed_expressions": {
		"link": "",
		"content": "If set, the evaluated expression will be added to the speed when the missile unit is launched.\n\n"

	},
	"dcei.engine.proto.Mover.throw": {
		"link": "dcei.engine.proto.ThrowMover",
		"content": "Moves the missile unit in a fixed direction. Unlike other movers, this mover doesn't move towards the target and will move indefinitely unless some other means of hit detection are used (such as the arrive_on_search_hit flag), or replaced by another mover (either by another launch missile effect, or when used in a multi-stage mover).\n\n"

	},
	"dcei.engine.proto.Mover": {
		"link": "",
		"content": "Movers are a specialized data type that describe the movement pattern of units or missiles launched with the [Launch Missile](Data-Effect-Launch-Missile) effect.\n\n"

	},
	"dcei.engine.proto.Mover.oneof_motion_type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Mover.upright": {
		"link": "",
		"content": "When enabled, forces the missile unit to maintain its original up vector (rather than following the arc of movement).\n\nTypically used for ballistic knockback movers to make the knockback motion look more natural.\n\n"

	},
	"dcei.engine.proto.Mover.no_rotation": {
		"link": "",
		"content": "When enabled, forces the missile unit to maintain its original facing (rather than rotating towards the target position).\n\nTypically used for ballistic knockback movers to make the knockback motion look more natural.\n\n"

	},
	"dcei.engine.proto.Mover.stay_on_nav_mesh": {
		"link": "",
		"content": "When enabled, attempts to keep the missile unit's target position inside the nav mesh. Useful for making knockback effects that respect nav mesh.\n\n"

	},
	"dcei.engine.proto.ProjectSettings": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ProjectSettings.project_info": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ProjectInfo.type": {
		"link": "",
		"content": "**GAME**:  \n\n**LIBRARY**:  \n\n"

	},
	"dcei.engine.proto.ProjectInfo.version": {
		"link": "",
		"content": "Version of the project (e.g., 1.2.3). Used when publishing the project.\n\n"

	},
	"dcei.engine.proto.ProjectInfo.project_name": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ProjectInfo.entry_map": {
		"link": "",
		"content": "For game projects, this is the starting map when launching the game in arcade or in standalone build. For library projects, this is the map that will be imported by dependents.\n\n"

	},
	"dcei.engine.proto.ProjectSettings.player": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.PlayerSettings.player_count": {
		"link": "",
		"content": "Used to set the maximum number of players for multiplayer games.\n\nCurrently only 1v1 games are supported on the [arcade](https://platform.wildsky.dev/).\n\n"

	},
	"dcei.engine.proto.ProjectSettings.display": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.DisplaySettings.orientation": {
		"link": "",
		"content": "Sets the display mode to be landscape (default) or portrait.\n\n**LANDSCAPE**:  the game will display in landscape mode\n\n**PORTRAIT**:  the game will display in portrait mode\n\n"

	},
	"dcei.engine.proto.DisplaySettings.resizable_window": {
		"link": "",
		"content": "If set, the application window can be resized.\n\n"

	},
	"dcei.engine.proto.ProjectSettings.input": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.InputSettings.key_mappings": {
		"link": "",
		"content": "Defines key mappings that trigger **[DCEI.TriggerAddMappedKeyDownEvent()](Trigger-API-Reference-DCEI-Events-Input#void-triggeraddmappedkeydowneventstring-keyeventname-typedcallbackstring-trigger)** events for PC and web games.\n\n"

	},
	"dcei.engine.proto.InputSettings.KeyMapping.name": {
		"link": "",
		"content": "The name to use for the mapped key event (ex: \"shoot\").\n\n"

	},
	"dcei.engine.proto.InputSettings.KeyMapping.key": {
		"link": "",
		"content": "The key mapped to this name.\n\n"

	},
	"dcei.engine.proto.ProjectSettings.font": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.FontSettings.override_fonts": {
		"link": "",
		"content": "Allows you to override the default text font per-language.\n\n"

	},
	"dcei.engine.proto.FontSettings.FontSetting.language": {
		"link": "",
		"content": "The language to override.\n\n"

	},
	"dcei.engine.proto.FontSettings.FontSetting.font": {
		"link": "",
		"content": "The font to use for this language.\n\n"

	},
	"dcei.engine.proto.ProjectSettings.build": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.BuildSettings.image_compression_quality": {
		"link": "",
		"content": "The quality level (0 to 10) when compressing custom image assets. A lower value can help reduce the asset size but will also lower the image quality. Default is 10 (the highest).\n\n"

	},
	"dcei.engine.proto.BuildSettings.disable_language_selection": {
		"link": "",
		"content": "Disable language selection options in the game. Use this when your game isn't localized yet.\n\n"

	},
	"dcei.engine.proto.ProjectSettings.game": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.GameSettings.simulation_frame_rate": {
		"link": "",
		"content": "Use 32fps might reduce game latencies, but it would also greatly increase amount of work engine needs to do, resulting in game fps drop. Not recommended for mobile games.\n\n**FPS_16**:  \n\n**FPS_32**:  \n\n"

	},
	"dcei.engine.proto.GameSettings.initialization_frame_count": {
		"link": "",
		"content": "The number of frames at the beginning of the game that are used to initialize data/UI etc. and take a long time to finish. The engine will wait for these frames to finish before progressing the loading bar to 100% and transition into the game view.\n\n"

	},
	"dcei.engine.proto.ProjectSettings.graphics": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.GraphicsSettings.use_simple_shadows": {
		"link": "",
		"content": "If true, all units will use \"blob\" shadows instead of detailed shadows.\n\n"

	},
	"dcei.engine.proto.GraphicsSettings.simple_shadow_color": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.GraphicsSettings.SimpleShadowColor.r": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.GraphicsSettings.SimpleShadowColor.g": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.GraphicsSettings.SimpleShadowColor.b": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.GraphicsSettings.SimpleShadowColor.a": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.GraphicsSettings.use_legacy_shadows": {
		"link": "",
		"content": "Set this to true if you want GpuAnimations to cast shadows on sprites. This will also disable GpuAnimations casting shadows on non-flat surfaces.\n\n"

	},
	"dcei.engine.proto.GraphicsSettings.use_legacy_lighting": {
		"link": "",
		"content": "Use the legacy lighting system (recommended for mobile games). This will force use_legacy_shadows to be true.\n\n"

	},
	"dcei.engine.proto.GraphicsSettings.outline_style": {
		"link": "",
		"content": "**WITHOUT_INNER_LINES**:  No inner lines on the inside of the unit and if two units overlap, the outline will only be visible around them.\n\n**WITH_INNER_LINES**:  Inner lines will be rendered on the inside of the unit between different body parts and between overlapping units.\n\n"

	},
	"dcei.engine.proto.GraphicsSettings.use_legacy_outline_width_mode": {
		"link": "",
		"content": "By default, an outline width of 1 means 1/100 of the screen height. When the screen height increases, the size of both units and their outline increases proportionally so the outline to unit size ratio stays the same. Set this to true if you want to use the legacy mode where an outline width of 1 means 1/100 of the screen width. In the legacy mode, the outline to unit size ratio changes with the screen aspect ratio and the outline will look different from device to device.\n\n"

	},
	"dcei.engine.proto.ProjectSettings.canvas": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.CanvasSettings.reference_width": {
		"link": "",
		"content": "If the device's resolution does not match the reference width or height, the UI will be scaled up until either the width or the height matches device's resolution. In order to prevent custom sprites from being scaled, either the reference width or height should match the final device's resolution. These are 1344x750 by default.\n\n"

	},
	"dcei.engine.proto.CanvasSettings.reference_height": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ProjectSettings.asset_pack": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.AssetPackSettings.asset_packs": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.AssetPack.name": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.AssetPack.version": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Unit": {
		"link": "",
		"content": "Units are the core interactive game object of the editor. All other data types (such as abilities, weapons, and behaviors) interact with units in some way, shape, or form.\n\n"

	},
	"dcei.engine.proto.Unit.template": {
		"link": "GenericField.template",
		"content": ""

	},
	"dcei.engine.proto.Unit.parent": {
		"link": "GenericField.parent",
		"content": ""

	},
	"dcei.engine.proto.UnitComponent.unit_category": {
		"link": "dcei.engine.proto.UnitComponent.UnitType",
		"content": "Sets the type of unit.\n\n"

	},
	"dcei.engine.proto.UnitComponents.unit_stats": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.UnitStatsComponent.radius": {
		"link": "",
		"content": "Determines the collision size of the unit.\n\n"

	},
	"dcei.engine.proto.UnitStatsComponent.invulnerable": {
		"link": "",
		"content": "When checked, the unit will match the \"Invulnerable\" [target filters](Data-Effect-Area-Search#filter). Note that currently this flag does not actually make the unit immortal or invulnerable.\n\n"

	},
	"dcei.engine.proto.UnitStatsComponent.ground": {
		"link": "",
		"content": "When checked, the unit will collide with other ground units and match the \"Ground\" [target filters](Data-Effect-Area-Search#filter).\n\n"

	},
	"dcei.engine.proto.UnitStatsComponent.air": {
		"link": "",
		"content": "When checked, the unit will collide with other air units and match the \"Air\" [target filters](Data-Effect-Area-Search#filter).\n\n"

	},
	"dcei.engine.proto.UnitStatsComponent.selectable": {
		"link": "",
		"content": "Determines whether or not the unit can be selected.\n\n"

	},
	"dcei.engine.proto.UnitStatsComponent.target_priority": {
		"link": "",
		"content": "Determines the target priority for the \"Target Priority\" [target filter sort key](GenericEnum#searchfilterfiltersortmethod). Default target priority is 10. Useful for making certain units higher or lower priority attack targets.\n\n"

	},
	"dcei.engine.proto.UnitStatsComponent.selection_priority": {
		"link": "",
		"content": "Determines the unit selection priority when multiple units are overlapping. Higher priority units will be selected over lower priority units.\n\n"

	},
	"dcei.engine.proto.UnitStatsComponent.ignore_unit_collision": {
		"link": "",
		"content": "When checked, the unit will ignore collision with other units. Note that this does not affect navigation mesh pathfinding (ie collision with props).\n\n"

	},
	"dcei.engine.proto.UnitStatsComponent.ignore_pathing": {
		"link": "",
		"content": "When checked, the unit will ignore navigation mesh and move in a direct line to its target position.\n\n"

	},
	"dcei.engine.proto.UnitComponents.health": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.HealthComponent.max_health": {
		"link": "",
		"content": "The maximum health of the unit.\n\n"

	},
	"dcei.engine.proto.HealthComponent.start_health": {
		"link": "",
		"content": "The starting health of the unit. By default this will use the **Max Health** value.\n\n"

	},
	"dcei.engine.proto.HealthComponent.regeneration": {
		"link": "",
		"content": "The amount of health the unit regenerates per second.\n\n"

	},
	"dcei.engine.proto.HealthComponent.regeneration_delay": {
		"link": "",
		"content": "The delay after the unit takes damage before it begins regenerating health. Useful for making health only regenerate outside of combat.\n\n"

	},
	"dcei.engine.proto.UnitComponents.mana": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ManaComponent.max_mana": {
		"link": "",
		"content": "The maximum mana of the unit.\n\n"

	},
	"dcei.engine.proto.ManaComponent.start_mana": {
		"link": "",
		"content": "The starting mana of the unit. By default this will use the **Max Mana** value.\n\n"

	},
	"dcei.engine.proto.ManaComponent.regeneration": {
		"link": "",
		"content": "The amount of mana the unit regenerates per second.\n\n"

	},
	"dcei.engine.proto.ManaComponent.regeneration_delay": {
		"link": "",
		"content": "The delay after the spends mana before it begins regenerating mana.\n\n"

	},
	"dcei.engine.proto.UnitComponents.shield": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ShieldComponent.max_shield": {
		"link": "",
		"content": "The maximum shields of the unit.\n\n"

	},
	"dcei.engine.proto.ShieldComponent.start_shield": {
		"link": "",
		"content": "The starting shields of the unit. By default this will use the **Max Shield** value.\n\n"

	},
	"dcei.engine.proto.ShieldComponent.regeneration": {
		"link": "",
		"content": "The amount of shields the unit regenerates per second.\n\n"

	},
	"dcei.engine.proto.ShieldComponent.regeneration_delay": {
		"link": "",
		"content": "The delay after the unit takes damage before it begins regenerating shields.\n\n"

	},
	"dcei.engine.proto.UnitComponents.movement": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.MovementComponent.move_speed": {
		"link": "",
		"content": "The movement speed of the unit, in terrain grid-units-per-second.\n\n"

	},
	"dcei.engine.proto.MovementComponent.unit_height": {
		"link": "",
		"content": "The visual height of the unit. Useful for making flying units appear to be flying in the air.\n\n"

	},
	"dcei.engine.proto.UnitComponents.turning": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.UnitTurningComponent.turning_speed": {
		"link": "",
		"content": "The turning speed of the unit. Note that the unit must turn before moving if the target position is greater than 90 degrees from the unit's facing.\n\n"

	},
	"dcei.engine.proto.UnitComponents.behavior": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.BehaviorComponent.oneof_behavior_type": {
		"link": "",
		"content": "Controls the AI behavior type of the unit. Most of the time this should be set to **Generic Controllable Unit**. It's generally recommended to not use **Td Types** unless you know what you're doing and are creating a similar tower defense game.\n\n"

	},
	"dcei.engine.proto.BehaviorComponent.behavior_type": {
		"link": "dcei.engine.proto.BehaviorComponent.BehaviorType",
		"content": ""

	},
	"dcei.engine.proto.UnitComponents.unit_battle_data": {
		"link": "dcei.engine.proto.UnitBattleData",
		"content": ""

	},
	"dcei.engine.proto.UnitComponents.rally_point": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.RallyPointComponent.offset": {
		"link": "",
		"content": "The offset applied to [Set Rally Point](Data-Effect-Set-Rally-Point) effects.\n\n"

	},
	"dcei.engine.proto.UnitComponents.unit_value": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.UnitValueComponent.gold_cost": {
		"link": "",
		"content": "The base gold cost of the unit.\n\nCan be used to set the cost of morph abilities using [Use Unit Cost Difference](Data-Ability#use-unit-cost-difference). Can be modified by ability cost when using [Add To Unit Cost](Data-Ability#add-to-unit-cost).\n\n"

	},
	"dcei.engine.proto.Unit.references": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.UnitReferences.weapon_list": {
		"link": "",
		"content": "Which [Weapons](Data-Weapon) are available to the unit. Weapons are prioritized from top to bottom.\n\n"

	},
	"dcei.engine.proto.UnitReferences.ability_list": {
		"link": "",
		"content": "Which [Abilities](Data-Ability) are available to the unit. Abilities are prioritized from top to bottom.\n\n"

	},
	"dcei.engine.proto.UnitReferences.behavior_list": {
		"link": "",
		"content": "Which [Behaviors](Data-Behavior) the unit starts with. Behaviors are applied from top to bottom.\n\n"

	},
	"dcei.engine.proto.UnitReferences.on_start_ability": {
		"link": "",
		"content": "If set, this [Ability](Data-Ability) will be cast when the unit is created. This ability will be added to the unit's **Ability List** if not already present.\n\n"

	},
	"dcei.engine.proto.UnitReferences.tag_list": {
		"link": "",
		"content": "Which [Tags](Data-Behavior#behavior-tag-array) the unit starts with.\n\n"

	},
	"dcei.engine.proto.Tag.name": {
		"link": "",
		"content": "The name of the tag to apply.\n\n"

	},
	"dcei.engine.proto.Tag.count": {
		"link": "",
		"content": "The number of stacks of the tag to apply.\n\n"

	},
	"dcei.engine.proto.Tag.duration": {
		"link": "",
		"content": "The duration the tag will last (the default setting will last indefinitely).\n\n"

	},
	"dcei.engine.proto.Unit.level": {
		"link": "",
		"content": "A unit level reference that can be referenced in validator expressions. Current usage is limited.\n\n"

	},
	"dcei.engine.proto.Unit.display_name": {
		"link": "",
		"content": "Sets the display name of the unit, which can be referenced in triggers with [DCEI.GetUnitDisplayName()](Trigger-API-Reference-DCEI-Functions-Unit#string-getunitdisplaynameunit-unit). Accepts string or localization key.\n\n"

	},
	"dcei.engine.proto.Unit.hide_unit_status_bar": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Unit.ingame_icon": {
		"link": "",
		"content": "Sets the unit icon as displayed by [DCEI.ShowUnitStatusUiInSlot()](InGame-UI-Functions-Overview#hero-status). Enabling the **custom** flag allows you to specify any texture (using the asset name, not asset path).\n\n"

	},
	"dcei.engine.proto.Unit.bind_ability_ui": {
		"link": "",
		"content": "When enabled, the unit will display its ability menu when selected, similar to [DCEI.ShowAbilitiesUi()](InGame-UI-Functions-Overview#circle-menu). Useful for quickly testing abilities.\n\n"

	},
	"dcei.engine.proto.Unit.health_bar": {
		"link": "",
		"content": "The type of health bar to display.\n\n"

	},
	"dcei.engine.proto.Unit.HealthBarOption.type": {
		"link": "",
		"content": "**DEFAULT**:  The default health bar. Displays in green for allied units and red for enemy units.\n\n**GENERAL**:  The default health bar. Displays in green for allied units and red for enemy units.\n\n**SHIP**:  A massive health bar. Displays in green for allied and enemy units.\n\n**HERO**:  A bigger health bar. Displays in green for allied and enemy units.\n\n**DOT_MANA**:  Displays mana as a large yellow bar with 10 segments.\n\n**DOT_HEALTH**:  Displays health as a large yellow bar with 10 segments.\n\n**HEALTH_WITH_MANA**:  Same as **SHIP** but additional displays mana in purple.\n\n**NONE**:  Shows no health bar for the unit.\n\n"

	},
	"dcei.engine.proto.Unit.HealthBarOption.show_when_full": {
		"link": "",
		"content": "Some health bars will automatically hide when the unit's health is full. Set this flag will override this behavior and make it always show.\n\n"

	},
	"dcei.engine.proto.Unit.unit_event_triggers": {
		"link": "",
		"content": "Effects triggerd on unit events\n\n"

	},
	"dcei.engine.proto.UnitEventTriggers.on_unit_create_effects": {
		"link": "",
		"content": "Effects will be triggered when the unit is created.\n\n"

	},
	"dcei.engine.proto.UnitEventTriggers.on_unit_death_effects": {
		"link": "",
		"content": "Effects will be triggered when the unit dies.\n\n"

	},
	"dcei.engine.proto.UnitEventTriggers.on_unit_remove_effects": {
		"link": "",
		"content": "Effects will be triggered when the unit is removed.\n\n"

	},
	"dcei.engine.proto.Unit.dependent_units": {
		"link": "",
		"content": "Dependent units will be loaded when the unit is loaded\n\n"

	},
	"dcei.engine.proto.Unit.dependent_effects": {
		"link": "",
		"content": "Dependent effects will be loaded when the unit is loaded\n\n"

	},
	"dcei.engine.proto.Unit.dependent_behaviors": {
		"link": "",
		"content": "Dependent behaviors will be loaded when the unit is loaded\n\n"

	},
	"dcei.engine.proto.Unit.dependent_sprite_assets": {
		"link": "",
		"content": "Dependent sprites will be loaded when this unit is loaded.\n\n"

	},
	"dcei.engine.proto.Unit.mini_map_config": {
		"link": "",
		"content": "These settings determine how the unit will be rendered on a minimap frame.\n\n"

	},
	"dcei.engine.proto.Unit.MiniMapConfig.mini_map_ui_type": {
		"link": "",
		"content": "Determines whether the unit renders as a circle or sprite on the minimap.\n\n"

	},
	"dcei.engine.proto.Unit.MiniMapConfig.show_on_mini_map": {
		"link": "",
		"content": "When enabled, causes the unit to render on minimap frames.\n\n"

	},
	"dcei.engine.proto.Unit.MiniMapConfig.render_priority": {
		"link": "",
		"content": "Higher render priority units will display above lower priority ones in the minimap.\n\n"

	},
	"dcei.engine.proto.Unit.MiniMapConfig.tint_color": {
		"link": "",
		"content": "Sets the tint color of the unit's minimap render using RGB values.\n\n"

	},
	"dcei.engine.proto.Unit.affinity_index": {
		"link": "",
		"content": "The affinity of this unit. Only set this field if: 1. this is a hero unit. 2. and this hero is used as a built-in hero (i.e., not added through a loadout hero card but available in the level automatically). The mapping: 1 => normal 2 => fire 3 => ice 4 => nature 5 => light 6 => dark\n\n"

	},
	"dcei.engine.proto.Unit.card_name": {
		"link": "",
		"content": "Name of the card this unit is associated with. Used for reporting in-game stats. It's automatically set by the engine when loading card information. Only set it explicitly if the unit belongs to a card that hasn't been implemented yet and you want to gather stats for it.\n\n"

	},
	"dcei.engine.proto.Validator": {
		"link": "",
		"content": "Validators are conditions that evaluate to true or false. Validators can be plugged into other data types and can be used to [remove](Data-Behavior#behavior-validators-remove)/[disable behaviors](Data-Behavior#behavior-validators-disable), add additional checks to determine if a [weapon](Data-Weapon#validators) or [ability](Data-Ability#validators) can fire, or create if/then/elseif style statements within [effects](Data-Effect-Switch-Effect) (among other uses). \nSee our notion guide on [Using Validators](https://www.notion.so/funovus/Using-Validators-dcf07ecd524d48548302cd77b9633e29)\n\n"

	},
	"dcei.engine.proto.Validator.unit_within_range": {
		"link": "",
		"content": "Returns true if the specified number of units are found within a search radius.\n\n"

	},
	"dcei.engine.proto.Validator.UnitWithinRange.range": {
		"link": "",
		"content": "The radius of the circle to search.\n\n"

	},
	"dcei.engine.proto.Validator.UnitWithinRange.unit_count_range": {
		"link": "dcei.engine.proto.ValidatorExpressions.RangeInt",
		"content": "Returns true if the number of units found is between this min and max.\n\n"

	},
	"dcei.engine.proto.Validator.UnitWithinRange.distance_check_mode": {
		"link": "dcei.engine.proto.DistanceCheckModes",
		"content": "Determines whether to consider unit radius or center point when finding targets.\n\n"

	},
	"dcei.engine.proto.Validator.UnitWithinRange.distance_extend_mode": {
		"link": "dcei.engine.proto.DistanceExtendModes",
		"content": "Determines whether to extend the search radius by the source unit's radius.\n\n"

	},
	"dcei.engine.proto.Validator.UnitWithinRange.search_filter": {
		"link": "dcei.engine.proto.SearchFilter",
		"content": "Similar to other search filters.\nSee: [Data/Effect/Area Search](Data-Effect-Area-Search#filter)\n\n"

	},
	"dcei.engine.proto.Validator.UnitWithinRange.target_validators": {
		"link": "",
		"content": "Target units must pass these validators to be considered valid targets.\n\n"

	},
	"dcei.engine.proto.Validator.nearby_unit_health": {
		"link": "",
		"content": "Returns true if a number of units are found within a search radius with a specific health value.\n\nShares many fields with [Unit Within Range](#unit-within-range).\n\n"

	},
	"dcei.engine.proto.Validator.NearbyUnitHealth.range": {
		"link": "",
		"content": "The radius of the circle to search.\n\n"

	},
	"dcei.engine.proto.Validator.NearbyUnitHealth.unit_count_range": {
		"link": "dcei.engine.proto.ValidatorExpressions.RangeInt",
		"content": "Returns true if the number of units found is between this min and max.\n\n"

	},
	"dcei.engine.proto.Validator.NearbyUnitHealth.value_type": {
		"link": "dcei.engine.proto.Validator.ValidatorValueType",
		"content": "Whether the validator will check units' health as an **Absolute** or **Percentage** (between 0 and 1).\n\n"

	},
	"dcei.engine.proto.Validator.NearbyUnitHealth.health_value_range": {
		"link": "dcei.engine.proto.ValidatorExpressions.RangeDouble",
		"content": "Returns true if enough units are found with health within this min and max.\n\n"

	},
	"dcei.engine.proto.Validator.NearbyUnitHealth.check_health_unit_range": {
		"link": "dcei.engine.proto.ValidatorExpressions.RangeInt",
		"content": "Determines how many units must be found with the health value specified in **Health Value Range**.\n\nNote that the total number of units found must also satisfy the **Unit Count Range**.\n\n"

	},
	"dcei.engine.proto.Validator.NearbyUnitHealth.distance_check_mode": {
		"link": "dcei.engine.proto.DistanceCheckModes",
		"content": "Determines whether to consider unit radius or center point when finding targets.\n\n"

	},
	"dcei.engine.proto.Validator.NearbyUnitHealth.distance_extend_mode": {
		"link": "dcei.engine.proto.DistanceExtendModes",
		"content": "Determines whether to extend the search radius by the source unit's radius.\n\n"

	},
	"dcei.engine.proto.Validator.NearbyUnitHealth.search_filter": {
		"link": "dcei.engine.proto.SearchFilter",
		"content": "Similar to other search filters.\nSee: [Data/Effect/Area Search](Data-Effect-Area-Search#filter)\n\n"

	},
	"dcei.engine.proto.Validator.health_value": {
		"link": "",
		"content": "Returns true if a unit has health within a specific range.\n\n"

	},
	"dcei.engine.proto.Validator.HealthValue.which_unit": {
		"link": "",
		"content": "Which unit will be considered by the validator. Using NONE defaults to TARGET_UNIT.\n\n"

	},
	"dcei.engine.proto.Validator.HealthValue.health_value_range": {
		"link": "dcei.engine.proto.ValidatorExpressions.RangeDouble",
		"content": "Returns true if the checked unit's health is within this min and max.\n\n"

	},
	"dcei.engine.proto.Validator.HealthValue.value_type": {
		"link": "dcei.engine.proto.Validator.ValidatorValueType",
		"content": "Whether the validator will check health as an **Absolute** or **Percentage** (between 0 and 1).\n\n"

	},
	"dcei.engine.proto.Validator.troop_amount": {
		"link": "",
		"content": "Returns true of the unit has a specified number of child troop units.\n\n"

	},
	"dcei.engine.proto.Validator.TroopAmount.amount_range": {
		"link": "dcei.engine.proto.ValidatorExpressions.RangeInt",
		"content": "Returns true of the unit has a specified number of child troop units.\n\n"

	},
	"dcei.engine.proto.Validator.TroopAmount.unit_type_name": {
		"link": "",
		"content": "Returns true if enough units are found with health within this min and max.\n\n"

	},
	"dcei.engine.proto.Validator.is_child": {
		"link": "",
		"content": "Returns true if the child_unit is a child troop of parent_unit.\n\n"

	},
	"dcei.engine.proto.Validator.IsChild.child_unit": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Validator.IsChild.parent_unit": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Validator.unit_filter": {
		"link": "",
		"content": "Returns true if a unit matches a specific [unit type](Data-Unit#unit-type) (unit, missile, or structure).\n\n"

	},
	"dcei.engine.proto.Validator.UnitFilter.validate_unit_filter": {
		"link": "dcei.engine.proto.UnitComponent.UnitType",
		"content": "Returns true if the specified unit is of this type.\n\n"

	},
	"dcei.engine.proto.Validator.UnitFilter.which_unit": {
		"link": "",
		"content": "Which unit will be considered by the validator.\n\n"

	},
	"dcei.engine.proto.Validator.combine": {
		"link": "",
		"content": "Allows you to combine other validators using logical operators.\n\nCombine validators can be nested. Can be combined with [negate](#negate) for even more logic.\n\n"

	},
	"dcei.engine.proto.Validator.Combine.operation": {
		"link": "",
		"content": "**AND**:  Returns true if all of the listed validators are true.\n\n**OR**:  Returns true if any of the listed validators are true.\n\n"

	},
	"dcei.engine.proto.Validator.Combine.validator_list": {
		"link": "",
		"content": "The list of validators to combine.\n\n"

	},
	"dcei.engine.proto.Validator.unit_engaged": {
		"link": "",
		"content": "Returns true if the specified unit is engaged.\n\n"

	},
	"dcei.engine.proto.Validator.UnitEngaged.which_unit": {
		"link": "",
		"content": "Using NONE defaults to TARGET_UNIT.\n\n"

	},
	"dcei.engine.proto.Validator.unit_type": {
		"link": "",
		"content": "Returns true if a unit is of a specific type.\n\n"

	},
	"dcei.engine.proto.Validator.UnitType.unit_type_name": {
		"link": "",
		"content": "Returns true if the unit is of this type.\n\n"

	},
	"dcei.engine.proto.Validator.UnitType.which_unit": {
		"link": "",
		"content": "Which unit will be considered by the validator.\n\n"

	},
	"dcei.engine.proto.Validator.location_is_lane": {
		"link": "",
		"content": "Returns true if a point is in a lane (as defined in Terrain/WayPoints/Routes).\n\n"

	},
	"dcei.engine.proto.Validator.LocationIsLane.target": {
		"link": "",
		"content": "Which point to check.\n\n"

	},
	"dcei.engine.proto.Validator.LocationIsLane.ignore_rally_disabled_lanes": {
		"link": "",
		"content": "If enabled, routes using the \"Disable Rally\" flag won't be considered.\n\n"

	},
	"dcei.engine.proto.Validator.unit_ai_behavior": {
		"link": "",
		"content": "Returns true if a unit has the specified [AI Behavior type](Data-Unit#behavior).\n\n"

	},
	"dcei.engine.proto.Validator.UnitAiBehavior.behavior_type": {
		"link": "dcei.engine.proto.BehaviorComponent.BehaviorType",
		"content": "Returns true if the unit has this AI behavior type.\n\n"

	},
	"dcei.engine.proto.Validator.UnitAiBehavior.which_unit": {
		"link": "",
		"content": "Which unit will be considered by the validator.\n\n"

	},
	"dcei.engine.proto.Validator.wave_started": {
		"link": "",
		"content": "Returns true if the first wave has started.\n\n"

	},
	"dcei.engine.proto.Validator.unit_stats": {
		"link": "",
		"content": "Returns true if a unit matches the specified unit filter.\n\nCurrently only supports checking if the unit is an [air](Data-Unit#unit-stats) unit.\n\n"

	},
	"dcei.engine.proto.Validator.UnitStats.which_unit": {
		"link": "",
		"content": "Which unit will be considered by the validator.\n\n"

	},
	"dcei.engine.proto.Validator.UnitStats.air": {
		"content": "Returns true if the unit matches this filter.\n\n"

	},
	"dcei.engine.proto.Validator.point_on_navmesh": {
		"link": "",
		"content": "Returns true if a point is on the nav mesh.\n\n"

	},
	"dcei.engine.proto.Validator.PointOnNavmesh.target": {
		"link": "",
		"content": "Which point to check.\n\n"

	},
	"dcei.engine.proto.Validator.effect_critical_hit": {
		"link": "",
		"content": "Returns true if the effect tree is a critical hit.\n\nNote that this is only relevant for effect trees created by [abilities](Data-Ability#critical-chance) or [weapons](Data-Weapon#critical-chance). \n\n"

	},
	"dcei.engine.proto.Validator.unit_is_moving": {
		"link": "",
		"content": "Returns true if a unit is currently moving.\n\n"

	},
	"dcei.engine.proto.Validator.UnitIsMoving.which_unit": {
		"link": "",
		"content": "Which unit to check. Using NONE defaults to TARGET_UNIT.\n\n"

	},
	"dcei.engine.proto.Validator.point_on_cliff": {
		"link": "",
		"content": "Returns true if a point is on the cliff.\n\n"

	},
	"dcei.engine.proto.Validator.PointOnCliff.location": {
		"link": "",
		"content": "Which point to check.\n\n"

	},
	"dcei.engine.proto.Validator.expression": {
		"link": "",
		"content": "Returns the result of the evaluated [expression](Data-Expression). Non-zero numbers are treated as true, 0 is treated as false.\n\n"

	},
	"dcei.engine.proto.Validator.negate": {
		"link": "",
		"content": "Flips the result of the validator, similar to the `not` in Lua (true becomes false, false becomes true).\n\n"

	},
	"dcei.engine.proto.Weapon": {
		"link": "",
		"content": "Weapons are used to create auto-attacks for units. Similar to abilities, weapons create effect trees that determine their functionality. \n**Common Weapon Patterns**\n* **Melee Weapon**: Weapon > [Damage](Data-Effect-Damage)\n* **Melee Weapon (AOE)**: Weapon > [Area Search](Data-Effect-Area-Search) > [Damage](Data-Effect-Damage)\n* **Ranged Weapon**: Weapon > [Launch Missile](Data-Effect-Launch-Missile) > [Damage](Data-Effect-Damage)\n\n"

	},
	"dcei.engine.proto.Weapon.template": {
		"link": "GenericField.template",
		"content": ""

	},
	"dcei.engine.proto.Weapon.parent": {
		"link": "GenericField.parent",
		"content": ""

	},
	"dcei.engine.proto.Weapon.family": {
		"link": "",
		"content": "Used for enabling/disabling families of weapons via behaviors.\n\n"

	},
	"dcei.engine.proto.Weapon.effect": {
		"link": "",
		"content": "The Effect created by the weapon on the target unit.\n\nSee: [Data/Effect](Data-Effect)\n\n"

	},
	"dcei.engine.proto.Weapon.critical_chance": {
		"link": "",
		"content": "The chance that the weapon attack is considered a critical. The value is a fraction, so 0 is 0% chance and 1 is 100% chance of critical hit.\n\n"

	},
	"dcei.engine.proto.Weapon.critical_effect": {
		"link": "",
		"content": "The effect that is executed instead of the Effect when the ability is a critical. If this is not set, the default Effect will be used on critical instead.\n\nSee: [Data/Effect](Data-Effect)\n\n"

	},
	"dcei.engine.proto.Weapon.independent_target_acquisition": {
		"link": "",
		"content": "If this is set, this weapon can acquire its own target and search for a target.\n\nWhen checked, the weapon can acquire its own target, rather than being limited to the current target of the unit. This is useful for making secondary weapons.\n\n"

	},
	"dcei.engine.proto.Weapon.independent_pre_and_back_swing": {
		"link": "",
		"content": "If this is checked, this weapon can fire when other weapons are in pre or back swing stage.\n\nWhen checked, the weapon can be fired while other weapons on the unit are in preswing/backswing state. Otherwise only weapon can be fired at a time.\n\n"

	},
	"dcei.engine.proto.Weapon.can_fire_while_moving": {
		"link": "",
		"content": "If this is checked, using this weapon will not stop movement.\n\nWhen checked, allows the weapon to be used while the unit is moving.\n\n"

	},
	"dcei.engine.proto.Weapon.channeled": {
		"link": "",
		"content": "If this is checked, this weapon will be a channelling weapon along with a channeling persistent effect\n\nWhen checked, the weapon will function as a channeled weapon if the [effect](#effect) is a [persistent](Data-Effect-Persistent) effect.\nChanneled weapons will continuously fire after the [Pre Swing](#pre-swing), using data from the persistent effect:\n* The [periodic durations](Data-Effect-Persistent#periodic-durations) as the channeled tick rate. \n* The [periodic effects](Data-Effect-Persistent#periodic-effects) as the channeled effects each tick rate.\n* The [periodic count](Data-Effect-Persistent#periodic-count) for will be ignored, as the weapon will fire continuously as long as it has a valid target.\n\n"

	},
	"dcei.engine.proto.Weapon.force_cast_followthrough": {
		"link": "",
		"content": "If target dies, this flag will keep the weapon firing to the last valid target position\n\nWhen checked, the weapon will continue firing and execute its effect if the target dies or becomes invalid during the [Pre Swing](#pre-swing), rather than canceling the attack (and attack animation).\nThis tends to make ranged weapon attack animations look better when facing many targets as it prevents the unit from continuously canceling animations.\n\n"

	},
	"dcei.engine.proto.Weapon.no_turn_outside_of_arc": {
		"link": "",
		"content": "If the flag is set and target is out of arc, this weapon cannot be used to attack\n\nWhen checked, the unit won't turn to face targets that are outside of the primary weapon [arc](#arc). This is useful for units that are not meant to turn (such as in shoot-em-up type games).\n\n"

	},
	"dcei.engine.proto.Weapon.validators": {
		"link": "",
		"content": "Weapon does not execute if any validator fails (does not trigger cost or cooldown)\n\nEach [validator](Data-Validator) must succeed in order for the weapon to be able to be fire.\n\n"

	},
	"dcei.engine.proto.Weapon.stats": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.WeaponStats.pre_swing": {
		"link": "",
		"content": "The delay between the weapon starting to fire and the effect being executed.\n\nUsed with [Back Swing](#back-swing) for the purposes of animating the unit.\n\n"

	},
	"dcei.engine.proto.WeaponStats.random_preswing_delay_min": {
		"link": "",
		"content": "The minimum random delay added to the weapon's Pre Swing stats. Supports negative numbers.\n\nUseful for preventing groups of units that share the same weapon from firing in sync.\n\n"

	},
	"dcei.engine.proto.WeaponStats.random_preswing_delay_max": {
		"link": "",
		"content": "The maximum random delay added to the weapon's Pre Swing stats. Supports negative numbers.\n\n"

	},
	"dcei.engine.proto.WeaponStats.back_swing": {
		"link": "",
		"content": "The delay between the effect being executed and the weapon firing state ending.\n\nUsed with [Pre Swing](#pre-swing) for the purposes of animating the unit. The sum of [Pre Swing](#pre-swing) plus [Back Swing](#back-swing) is the minimum cooldown of the weapon.\n\n"

	},
	"dcei.engine.proto.WeaponStats.period": {
		"link": "",
		"content": "The cooldown of the weapon or how long the unit must wait to use it again.\n\nThe duration of the cooldown is effectively extended by the [Pre Swing](#pre-swing), as the period doesn't begin counting down until after the damage point.\n\n"

	},
	"dcei.engine.proto.WeaponStats.use_initial_cooldown": {
		"link": "",
		"content": "If checked, this weapon will start on cooldown.\n\n"

	},
	"dcei.engine.proto.WeaponStats.use_cooldown_on_enable": {
		"link": "",
		"content": "If checked, this weapon will enter cooldown when it is disabled then enabled.\n\n"

	},
	"dcei.engine.proto.WeaponStats.minimal_range": {
		"link": "",
		"content": "The minimum distance the weapon can fire at.\n\n"

	},
	"dcei.engine.proto.WeaponStats.range": {
		"link": "",
		"content": "The maximum distance the weapon can fire at.\n\n"

	},
	"dcei.engine.proto.WeaponStats.scan_range": {
		"link": "",
		"content": "The range that the unit will use to search for targets to acquire when using this weapon.\n\nTypically set to the same value as [Range](#range).\n\n"

	},
	"dcei.engine.proto.WeaponStats.arc": {
		"link": "",
		"content": "The angle in front of the caster that targets must be in. If the target is outside this arc, the caster will attempt to turn to face the target before casting.\n\nExample: Arc 360 means the ability can be cast in any direction, 90 is a cone in front, and 0 is directly facing the target.\n\n"

	},
	"dcei.engine.proto.WeaponStats.buffer_range": {
		"link": "",
		"content": "Determines the distance targets must move beyond of the weapon range that will cause the weapon to cancel during pre swing. The default value of 0 causes the buffer range to be infinite.\n\nDetermines the distance targets must move beyond of the weapon range that will cause the weapon to cancel during pre swing. The default value of 0 causes the buffer range to be infinite.\n\n"

	},
	"dcei.engine.proto.Weapon.distance_check_mode": {
		"link": "dcei.engine.proto.DistanceCheckModes",
		"content": ""

	},
	"dcei.engine.proto.Weapon.distance_extend_mode": {
		"link": "dcei.engine.proto.DistanceExtendModes",
		"content": ""

	},
	"dcei.engine.proto.Weapon.target_filter": {
		"link": "",
		"content": "Used to determine the valid target types for the weapon.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.primary_sort_keys": {
		"link": "",
		"content": "Potential targets are sorted based on these parameters.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.PrimarySort.key": {
		"link": "dcei.engine.proto.SearchFilter.FilterSortMethod",
		"content": "The method used to sort potential targets.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.PrimarySort.order": {
		"link": "dcei.engine.proto.SearchFilter.FilterSortOrder",
		"content": "The order in which potential targets are sorted for priority.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.secondary_sort_keys": {
		"link": "",
		"content": "If a pair of targets have the same priority value due to Primary Sort Keys, this sort key is then used to determine which unit to target.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.SecondarySort.key": {
		"link": "dcei.engine.proto.SearchFilter.FilterSortMethod",
		"content": "The method used to sort potential targets.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.SecondarySort.order": {
		"link": "dcei.engine.proto.SearchFilter.FilterSortOrder",
		"content": "The order in which potential targets are sorted for priority.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.player": {
		"content": "Targets owned by the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.ally": {
		"content": "Targets owned by an ally of the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.enemy": {
		"content": "Targets owned by an enemy of the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.neutral": {
		"content": "Targets that are neutral to the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.unit": {
		"content": "Targets that use the \"Unit\" category will match the filter.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.missile": {
		"content": "Targets that use the \"Missile\" category will match the filter.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.structure": {
		"content": "Targets that use the \"Structure\" category will match the filter.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.air": {
		"content": "Targets that use air unit collision will match the filter.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.ground": {
		"content": "Targets that use ground unit collision will match the filter.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.stealth": {
		"content": "Targets with a behavior that uses the stealth flag will match the filter.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.invulerable": {
		"content": "Targets with the invulnerable flag will match the filter.\n\n"

	},
	"dcei.engine.proto.WeaponSearchFilter.alive": {
		"content": "Targets that are currently alive will match the filter.\n\n"

	},
	"dcei.engine.proto.Weapon.disabled": {
		"link": "",
		"content": "When checked, the weapon is disabled by default. Requires behaviors or other means to be enabled.\n\n"

	},
	"Generic_Enum": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.UnitActor.SelectionShape": {
		"link": "",
		"content": "**SPHERE**:  The actor will use a sphere shape for hit tests (default)\n\n**CUBE**:  The actor will use a cube shape for hit tests\n\n"

	},
	"dcei.engine.proto.SpriteOptions.RenderingGroup": {
		"link": "",
		"content": "**BACKGROUND**:  Background sprites are rendered below shadow and other sprites. To make the sprite render below units, put the sprite further away from the camera.\n\n**FOREGROUND**:  Foreground sprites are rendered above shadow and background sprites. To make the sprite render above units, put the sprite closer to the camera.\n\n**OVERLAY**:  Overlay sprites are rendered above all other objects except for UI.\n\n"

	},
	"dcei.engine.proto.SiteOperation.OrientationType": {
		"link": "",
		"content": "**WORLD_ORIENTATION**:  Sets the site operation relative to world facing (north is up).\n\n**ACTOR_ORIENTATION**:  Sets the site operation relative to the actor's facing.\n\n**ACTOR_ORIENTATION_IGNORING_OTHER_SITE_OPERATIONS**:  Sets the site operation relative to the actor's facing before any other site operations are applied.\n\n**EVENT_ORIENTATION**:  Makes the actor face the source of the triggering event (supports **Unit Weapon Start** and **Unit Ability Start**).\n\n**MOVE_ORIENTATION**:  Makes the actor's orientation align with its 3D movement vector.\n\n"

	},
	"dcei.engine.proto.BehaviorComponent.BehaviorType": {
		"link": "",
		"content": "**DO_NOTHING**:  The unit has no AI behavior.\n\n**GENERIC_CONTROLLABLE_UNIT**:  The unit has basic RTS behavior.\n\n**TD_HERO**:  The unit is a WildSky TD hero.\n\n**TD_HERO_PET**:  The unit is a WildSky TD hero pet.\n\n**TD_TOWER**:  The unit is a WildSky TD tower.\n\n**TD_TOWER_TROOP**:  The unit is a WildSky TD tower troop.\n\n**TD_CREEP**:  The unit is a WildSky TD creep.\n\n**TD_CREEP_AGGRESSIVE**:  The unit is a WildSky TD creep that actively searches for targets.\n\n**TD_CreepNoEngage**:  The unit is a WildSky TD non-aggressive creep.\n\n**TD_JUNGLE_CREEP**:  The unit is a WildSky TD jungle creep.\n\n**TD_SHIP**:  The unit is a WildSky TD ship.\n\n**TD_SUMMONED_TROOP**:  The unit is a WildSky TD summoned troop.\n\n**WANDER**:  The unit wanders aimlessly.\n\n"

	},
	"dcei.engine.proto.SearchFilter.FilterSortMethod": {
		"link": "",
		"content": "**NONE**:  Targets are sorted randomly.\n\n**TARGET_PRIORITY**:  Targets are sorted by target priority.\n\n**REMAINING_PATH_DISTANCE**:  Targets are sorted by waypoints distance.\n\n**DISTANCE_TO_SEARCH_CENTER**:  Targets are sorted by proximity to search center.\n\n**HEALTH_VALUE**:  Targets are sorted by current health.\n\n**HEALTH_MAX**:  Targets are sorted by total health.\n\n**HEALTH_FRACTION**:  Targets are sorted by health percentage.\n\n**VITALS**:  Targets are sorted by current health + shield.\n\n**VITALS_MAX**:  Targets are sorted by total health + shield.\n\n**VITALS_FRACTION**:  Targets are sorted by health + shield percentage.\n\n**SHIELD_VALUE**:  Targets are sorted by current shield value.\n\n**SHIELD_MAX**:  Targets are sorted by total shield value.\n\n**SHIELD_FRACTION**:  Targets are sorted by shield percentage.\n\n**ENGAGED**:  Targets are sorted by engaged state.\n\n**UNIT_COST**:  Targets are sorted by cost.\n\n**DISTANCE_TO_EFFECT_SOURCE**:  Targets are sorted by distance to the effect source.\n\n"

	},
	"dcei.engine.proto.SearchFilter.FilterSortOrder": {
		"link": "",
		"content": "**LOWEST_FIRST**:  Values are sorted from lowest to highest.\n\n**HIGHEST_FIRST**:  Values are sorted from highest to lowest.\n\n"

	},
	"dcei.engine.proto.SearchFilter.Flag": {
		"link": "",
		"content": "**ALLOWED**:  If the target has this type, it is still valid.\n\n**REQUIRED**:  The target must have this type in order to be valid.\n\n**EXCLUDED**:  If the target has this type it is invalid, even if it has a required type.\n\n"

	},
	"dcei.engine.proto.EffectUnitTarget.Type": {
		"link": "",
		"content": "**NONE**:  \n\n**TARGET_UNIT**:  the target unit of the previous effect, weapon, ability, or behavior.\n\n**SOURCE_UNIT**:  the last unit involved in the effect tree (a previous target, spawned unit, or missile).\n\n**CASTER_UNIT**:  the first unit involved in the effect tree (typically the unit that used the weapon or ability).\n\n"

	},
	"dcei.engine.proto.EffectTarget.Type": {
		"link": "",
		"content": "**NONE**:  \n\n**TARGET_UNIT**:  \n\n**TARGET_LOCATION**:  \n\n**TARGET_UNIT_OR_LOCATION**:  \n\n**SOURCE_UNIT**:  \n\n**SOURCE_LOCATION**:  \n\n**SOURCE_UNIT_OR_LOCATION**:  \n\n**CASTER_UNIT**:  \n\n**CASTER_LOCATION**:  \n\n**CASTER_UNIT_OR_LOCATION**:  \n\n"

	},
	"dcei.engine.proto.DistanceCheckModes": {
		"link": "",
		"content": "**CHECK_CLOSEST_EDGE**:  Targets are considered to be in-range if the outer edge of their radius is in-range.\n\n**CHECK_CENTER_ONLY**:  Targets are considered to be in-range if their center position is in-range.\n\n"

	},
	"dcei.engine.proto.DistanceExtendModes": {
		"link": "",
		"content": "**NO_EXTEND**:  The caster's radius is not added to the ability's range.\n\n**INCLUDE_SOURCE_UNIT_RADIUS**:  The caster's radius is added to the ability's range.\n\n"

	},
	"dcei.engine.proto.EffectAreaSearch.IncludeFlags": {
		"link": "",
		"content": "**NORMAL**:  Use default settings for this unit.\n\n**INCLUDE**:  This unit will always be included in the search.\n\n**EXCLUDE**:  This unit will always be excluded in the search.\n\n"

	},
	"dcei.engine.proto.EffectPersistent.SelectMode": {
		"link": "",
		"content": "Determines how the periodic duration, effect, or offset is selected.\n\n**SEQUENCE**:  Values are selected in order from top to bottom.\n\n**RANDOM**:  Values are selected randomly with no additional rules.\n\n**RANDOM_NO_REPEAT**:  Values are selected randomly with no sequentially repeating values (if possible).\n\n**RANDOM_SHUFFLE**:  Values will be put in a random order and then selected in that order.\n\n"

	},
	"dcei.engine.proto.EffectTargetType.Type": {
		"link": "",
		"content": "**NONE**:  \n\n**UNIT**:  \n\n**LOCATION**:  \n\n**UNIT_OR_LOCATION**:  \n\n"

	},
	"dcei.engine.proto.ValueType": {
		"link": "",
		"content": "**PERCENTAGE**:  Use percentage values.\n\n**VALUE**:  Use a literal value.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyType": {
		"link": "",
		"content": "**NONE_MODIFY_TYPE**:  \n\n**ADD**:  Add the amount to current amount.\n\n**SET**:  Set current amount.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.FilterSortMethod": {
		"link": "",
		"content": "**NONE**:  Targets are sorted randomly.\n\n**DISTANCE_TO_SEARCH_CENTER**:  Targets are sorted by proximity to search center.\n\n**DISTANCE_TO_EFFECT_SOURCE**:  Targets are sorted by distance to the effect source.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.FilterSortOrder": {
		"link": "",
		"content": "**LOWEST_FIRST**:  Values are sorted from lowest to highest.\n\n**HIGHEST_FIRST**:  Values are sorted from highest to lowest.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.Flag": {
		"link": "",
		"content": "**ALLOWED**:  If the target has this type, it is still valid.\n\n**REQUIRED**:  The target must have this type in order to be valid.\n\n**EXCLUDED**:  If the target has this type it is invalid, even if it has a required type.\n\n"

	},
	"dcei.engine.proto.ThrowMover.OrientationType": {
		"link": "",
		"content": "**TARGET_ORIENTATION**:  Orientation is relative to the direction from launch position to target position ignoring height differences.\n\n**WORLD_ORIENTATION**:  Orientation is relative to world facing (i.e., north).\n\n"

	},
	"dcei.engine.proto.Validator.ValidatorValueType": {
		"link": "",
		"content": "**NONE**:  Defaults to using absolute value.\n\n**ABSOLUTE**:  Use a literal value for comparison.\n\n**PERCENTAGE**:  Use percentage values for comparison (between 0 and 1).\n\n"

	},
	"dcei.engine.proto.UnitComponent.UnitType": {
		"link": "",
		"content": "**UNIT**:  The unit type is unit\n\n**MISSILE**:  The unit type is missile\n\n**STRUCTURE**:  The unit type is structure\n\n"

	},
	"dcei.engine.proto.ValidatorExpressions.UnitLocation": {
		"link": "",
		"content": "**CASTER_UNIT**:  The first unit involved in the effect tree (typically the unit that used the weapon or ability).\n\n**SOURCE_UNIT**:  The last unit involved in the effect tree (a previous target, spawned unit, or missile).\n\n**TARGET_UNIT**:  The target unit of the previous effect, weapon, ability, or behavior.\n\n"

	},
	"Generic_Field": {
		"link": "",
		"content": ""

	},
	"GenericField.template": {
		"link": "",
		"content": "When checked, this object is considered a template and will only be able to be referenced as a template or parent by other objects. Ex, template units cannot be placed in the terrain or created via CreateUnit.\n\n"

	},
	"GenericField.parent": {
		"link": "",
		"content": "Sets the parent for this object. An object will inherit all fields from their parent (displayed in grey).\n\n"

	},
	"Generic_Message": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorResource": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorResource.type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorResource.name": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ActorResource.priority": {
		"link": "",
		"content": "Currently only works for actors with ParticleAnimation resource type. Particle animations with a priority level lower than the game's VFX priority level won't be created. This can be set using DCEI.SetVfxPriorityLevel(). Note that the actor will be created, just not the particle animation\n\n"

	},
	"dcei.engine.proto.UnitActor.SelectionScale": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.UnitActor.SelectionScale.x": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.UnitActor.SelectionScale.y": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.UnitActor.SelectionScale.z": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.InitialScale": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.InitialScale.x": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.InitialScale.y": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.InitialScale.z": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.SpriteOptions": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.SpriteOptions.disable_camera_facing": {
		"link": "",
		"content": "Set actor with sprite asset not billboard facing camera, default sprite will keep facing camera\n\n"

	},
	"dcei.engine.proto.SpriteOptions.center_sprite_anchor": {
		"link": "",
		"content": "Set actor with sprite asset anchor to center, default will be bottom of the sprite\n\n"

	},
	"dcei.engine.proto.SpriteOptions.flip_x": {
		"link": "",
		"content": "If checked, flips the sprite horizontally.\n\n"

	},
	"dcei.engine.proto.SpriteOptions.flip_y": {
		"link": "",
		"content": "If checked, flips the sprite vertically.\n\n"

	},
	"dcei.engine.proto.SpriteOptions.rendering_group": {
		"link": "dcei.engine.proto.SpriteOptions.RenderingGroup",
		"content": "Sprites from different rendering groups are rendered in different phases of the engine's render pipeline. Set a proper rendering group to make the sprite render above/below other objects.\n\n"

	},
	"dcei.engine.proto.SpriteOptions.rendering_priority": {
		"link": "",
		"content": "Sets the sprite's rendering priority. Sprites within the same rendering group will be sorted by the rendering priority before rendering. To make the sprite render above/below other objects, set a proper rendering group.\n\n"

	},
	"dcei.engine.proto.SpriteOptions.enable_x_z_rotation_with_camera_facing": {
		"link": "",
		"content": "If checked, this allow sprites using camera facing to retain any rotations applied on the X or Z planes. This typically used with missile sprite actors to preserve mover rotations.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Offset": {
		"link": "",
		"content": "Applies an offset to the actor's position.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Offset.x": {
		"link": "",
		"content": "Left/Right offset. Positive values are offset right, negative values are offset left.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Offset.y": {
		"link": "",
		"content": "Up/Down offset. Positive values are up, negative values are down.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Offset.z": {
		"link": "",
		"content": "Forward/Back offset. Positive values are forward, negative values are back.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Offset.x_range": {
		"link": "",
		"content": "If set, a random value between 0 and the X Range will be applied to the X offset when this site operation is applied. Only accepts positive values.\n\nExample: X is -1 and X Range is 2 will result in a random X offset between -1 and 1.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Offset.y_range": {
		"link": "",
		"content": "If set, a random value between 0 and the Y Range will be applied to the Y offset when this site operation is applied. Only accepts positive values.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Offset.z_range": {
		"link": "",
		"content": "If set, a random value between 0 and the Z Range will be applied to the Z offset when this site operation is applied. Only accepts positive values.\n\n"

	},
	"dcei.engine.proto.SiteOperation.Offset.orientation": {
		"link": "dcei.engine.proto.SiteOperation.OrientationType",
		"content": "Determines relative direction of the offset.\n\n"

	},
	"dcei.engine.proto.UnitBattleData": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.UnitBattleData.enemy_search_range": {
		"link": "",
		"content": "The unit will search for enemies to attack within this radius.\n\n"

	},
	"dcei.engine.proto.UnitBattleData.engage_radius": {
		"link": "",
		"content": "The unit will search for enemies to engage within this radius.\n\n"

	},
	"dcei.engine.proto.UnitBattleData.reset_radius": {
		"link": "",
		"content": "The unit will leash if it leaves this radius.\n\n"

	},
	"dcei.engine.proto.UnitBattleData.chase_in_defense_area_only": {
		"link": "",
		"content": "Used for generic controllable unit. If target is outside of the range, the unit will stop chasing and go back\n\n"

	},
	"dcei.engine.proto.UnitBattleData.force_rescan_period": {
		"link": "",
		"content": "Time in seconds for weapons to be forced to rescan targets.\n\n"

	},
	"dcei.engine.proto.EffectOffset": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectOffset.oneof_offset_type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.SearchFilter.SearchFilterSort": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.SearchFilter.SearchFilterSort.key": {
		"link": "dcei.engine.proto.SearchFilter.FilterSortMethod",
		"content": "The method used to sort potential targets.\n\n"

	},
	"dcei.engine.proto.SearchFilter.SearchFilterSort.order": {
		"link": "dcei.engine.proto.SearchFilter.FilterSortOrder",
		"content": "The order in which potential targets are sorted for priority.\n\n"

	},
	"dcei.engine.proto.MorphParameters": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.MorphParameters.reset_health_percentage": {
		"link": "",
		"content": "If unchecked, new unit will retain the same health percentage as before the morph.\n\n"

	},
	"dcei.engine.proto.MorphParameters.reset_mana_percentage": {
		"link": "",
		"content": "If unchecked, new unit will retain the same mana percentage as before the morph.\n\n"

	},
	"dcei.engine.proto.AreaSearchType": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.AreaSearchType.oneof_area_search_type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.SearchFilter": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.SearchFilter.primary_sort_keys": {
		"link": "dcei.engine.proto.SearchFilter.SearchFilterSort",
		"content": "Potential targets are sorted based on these parameters.\n\n"

	},
	"dcei.engine.proto.SearchFilter.secondary_sort_keys": {
		"link": "dcei.engine.proto.SearchFilter.SearchFilterSort",
		"content": "If a pair of targets have the same priority value due to Primary Sort Keys, this sort key is then used to determine which unit to target.\n\n"

	},
	"dcei.engine.proto.SearchFilter.player": {
		"content": "Targets owned by the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.SearchFilter.ally": {
		"content": "Targets owned by an ally of the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.SearchFilter.enemy": {
		"content": "Targets owned by an enemy of the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.SearchFilter.neutral": {
		"content": "Targets that are neutral to the player that created the search will match the filter.\n\n"

	},
	"dcei.engine.proto.SearchFilter.unit": {
		"content": "Targets that use the \"Unit\" category will match the filter.\n\n"

	},
	"dcei.engine.proto.SearchFilter.missile": {
		"content": "Targets that use the \"Missile\" category will match the filter.\n\n"

	},
	"dcei.engine.proto.SearchFilter.structure": {
		"content": "Targets that use the \"Structure\" category will match the filter.\n\n"

	},
	"dcei.engine.proto.SearchFilter.air": {
		"content": "Targets that use air unit collision will match the filter.\n\n"

	},
	"dcei.engine.proto.SearchFilter.ground": {
		"content": "Targets that use ground unit collision will match the filter.\n\n"

	},
	"dcei.engine.proto.SearchFilter.stealth": {
		"content": "Targets with a behavior that uses the stealth flag will match the filter.\n\n"

	},
	"dcei.engine.proto.SearchFilter.invulerable": {
		"content": "Targets with the invulnerable flag will match the filter.\n\n"

	},
	"dcei.engine.proto.SearchFilter.alive": {
		"content": "Targets that are currently alive will match the filter.\n\n"

	},
	"dcei.engine.proto.EffectOffset.ExplicitOffset": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectOffset.ExplicitOffset.forward": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectOffset.ExplicitOffset.right": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectOffset.ExplicitOffset.up": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectOffset.PolarOffset": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectOffset.PolarOffset.yaw": {
		"link": "",
		"content": "Yaw (nose left or right, positive is right) around the normal axis in degrees .\n\n"

	},
	"dcei.engine.proto.EffectOffset.PolarOffset.pitch": {
		"link": "",
		"content": "Pitch (nose up or down, positive is down) around the transverse axis in degrees.\n\n"

	},
	"dcei.engine.proto.EffectOffset.PolarOffset.distance": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.SimpleSearchFilter.SearchFilterSort": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.SimpleSearchFilter.SearchFilterSort.key": {
		"link": "dcei.engine.proto.SimpleSearchFilter.FilterSortMethod",
		"content": "The method used to sort potential targets.\n\n"

	},
	"dcei.engine.proto.SimpleSearchFilter.SearchFilterSort.order": {
		"link": "dcei.engine.proto.SimpleSearchFilter.FilterSortOrder",
		"content": "The order in which potential targets are sorted for priority.\n\n"

	},
	"dcei.engine.proto.Double3": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Double3.x": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Double3.y": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Double3.z": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectOrientation": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectOrientation.Type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ValueWithRangeAndExpression": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ValueWithRangeAndExpression.value": {
		"link": "",
		"content": "The base value.\n\n"

	},
	"dcei.engine.proto.ValueWithRangeAndExpression.range": {
		"link": "",
		"content": "A random value between 0 and this value is added to the base value.\n\n"

	},
	"dcei.engine.proto.ValueWithRangeAndExpression.expressions": {
		"link": "",
		"content": "If set, the evaluated expression will be added to the base value.\n\n"

	},
	"dcei.engine.proto.GuidanceMover": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.GuidanceMover.acceleration": {
		"link": "",
		"content": "This value is added to the missile unit's speed each second.\n\n"

	},
	"dcei.engine.proto.GuidanceMover.acceleration_expressions": {
		"link": "",
		"content": "If set, the evaluated expression will be added to the acceleration when the missile unit is launched.\n\n"

	},
	"dcei.engine.proto.GuidanceMover.acceleration_range": {
		"link": "",
		"content": "A random value between 0 and this value is added to the missile unit's acceleration.\n\n"

	},
	"dcei.engine.proto.GuidanceMover.speed": {
		"link": "",
		"content": "The missile unit's initial speed, in terrain grid-units-per-second.\n\n"

	},
	"dcei.engine.proto.GuidanceMover.speed_expressions": {
		"link": "",
		"content": "If set, the evaluated expression will be added to the speed when the missile unit is launched.\n\n"

	},
	"dcei.engine.proto.GuidanceMover.speed_range": {
		"link": "",
		"content": "A random value between 0 and this value is added to the missile unit's speed.\n\n"

	},
	"dcei.engine.proto.GuidanceMover.min_speed": {
		"link": "",
		"content": "The minimum speed the missile unit can move.\n\n"

	},
	"dcei.engine.proto.GuidanceMover.max_speed": {
		"link": "",
		"content": "The maximum speed the missile unit can move. Note that this needs to be above 0 for the missile unit to go anywhere.\n\n"

	},
	"dcei.engine.proto.BallisticMover": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.BallisticMover.flight_time": {
		"link": "",
		"content": "When set, the missile unit's speed will be adjusted so that it takes this time to reach its target, regardless of the distance. When using flight time, speed should be set to 0.\n\n"

	},
	"dcei.engine.proto.BallisticMover.flight_time_expressions": {
		"link": "",
		"content": "If set, the evaluated expression will be added to the flight time when the missile unit is launched.\n\n"

	},
	"dcei.engine.proto.BallisticMover.flight_time_range": {
		"link": "",
		"content": "A random value between 0 and this value is added to the missile unit's flight time.\n\n"

	},
	"dcei.engine.proto.BallisticMover.speed": {
		"link": "",
		"content": "Speed of the mover. When using speed, flight time should be set to 0. Speed is measured in terrain grid-units-per-second.\n\n"

	},
	"dcei.engine.proto.BallisticMover.speed_expressions": {
		"link": "",
		"content": "If set, the evaluated expression will be added to the speed when the missile unit is launched.\n\n"

	},
	"dcei.engine.proto.BallisticMover.speed_range": {
		"link": "",
		"content": "A random value between 0 and this value is added to the missile unit's speed.\n\n"

	},
	"dcei.engine.proto.BallisticMover.gravity": {
		"link": "",
		"content": "Used to determine the height of the arc. Higher values mean a higher arc.\n\n"

	},
	"dcei.engine.proto.ThrowMover": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ThrowMover.acceleration": {
		"link": "dcei.engine.proto.ValueWithRangeAndExpression",
		"content": "This value is added to the missile unit's speed each second.\n\n"

	},
	"dcei.engine.proto.ThrowMover.speed": {
		"link": "dcei.engine.proto.ValueWithRangeAndExpression",
		"content": "The missile unit's initial speed, in terrain grid-units-per-second.\n\n"

	},
	"dcei.engine.proto.ThrowMover.min_speed": {
		"link": "",
		"content": "The minimum speed the missile unit can move.\n\n"

	},
	"dcei.engine.proto.ThrowMover.max_speed": {
		"link": "",
		"content": "The maximum speed the missile unit can move. Note that this needs to be above 0 for the missile unit to go anywhere.\n\n"

	},
	"dcei.engine.proto.ThrowMover.orientation": {
		"link": "dcei.engine.proto.ThrowMover.Orientation",
		"content": "The mover's move direction.\n\n"

	},
	"dcei.engine.proto.ThrowMover.Orientation": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ThrowMover.Orientation.yaw": {
		"link": "dcei.engine.proto.ValueWithRangeAndExpression",
		"content": "Turn right or left in degrees (positive is right, negative is left).\n\n"

	},
	"dcei.engine.proto.ThrowMover.Orientation.pitch": {
		"link": "dcei.engine.proto.ValueWithRangeAndExpression",
		"content": "Turn down or up in degrees (positive is down, negative is up).\n\n"

	},
	"dcei.engine.proto.ThrowMover.Orientation.type": {
		"link": "dcei.engine.proto.ThrowMover.OrientationType",
		"content": ""

	},
	"dcei.engine.proto.ValidatorExpressions.RangeInt": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ValidatorExpressions.RangeInt.min": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ValidatorExpressions.RangeInt.max": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ValidatorExpressions.RangeDouble": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ValidatorExpressions.RangeDouble.min": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.ValidatorExpressions.RangeDouble.max": {
		"link": "",
		"content": ""

	},
	"Selectable_Type": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.BehaviorComponent.do_nothing": {
		"link": "",
		"content": "The unit will have no AI behavior. This causes the unit to be unable to move, attack, or otherwise accept commands.\n\n"

	},
	"dcei.engine.proto.BehaviorComponent.generic_controllable_unit": {
		"link": "",
		"content": "The unit will use the basic AI behavior and accept commands. Generic controllable units with weapons will attempt to attack valid targets in range.\n\n"

	},
	"dcei.engine.proto.BehaviorComponent.BehaviorGenericControllableUnit.leash_radius": {
		"link": "",
		"content": "Units will only chase auto-acquired targets within this radius. If the unit leaves this radius, it will be ordered to return to its original position (ie the origin of the leash radius). The unit will not be able to auto-acquire a new target until it reaches the leash reset radius. The position of the leash region only updates when a unit becomes idle.\n\n"

	},
	"dcei.engine.proto.BehaviorComponent.BehaviorGenericControllableUnit.leash_reset_radius": {
		"link": "",
		"content": "Leashed units (ones that have abandoned their auto-acquired targets and are moving towards their original position) are allowed to acquire new targets within this radius. The leash reset region uses the same origin as the leash region (and updates with it). The purpose of using two regions is to prevent attackers from being able to kite defenders by jumping in and out of the leash radius; The leash reset radius should be significantly smaller than the leash radius to provide the defender a decent area to retreat to.\n\n"

	},
	"dcei.engine.proto.BehaviorComponent.BehaviorGenericControllableUnit.force_rescan": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.BehaviorComponent.BehaviorGenericControllableUnit.ForceRescan.period": {
		"link": "",
		"content": "If set, the unit will be forced to reconsider its current weapon target each period. Otherwise weapons tend to stick to the current target until it becomes invalid or dies.\n\n"

	},
	"dcei.engine.proto.BehaviorComponent.wander": {
		"link": "",
		"content": "The unit will wander aimlessly. Useful for villagers or critters.\n\n"

	},
	"dcei.engine.proto.BehaviorComponent.BehaviorWander.change_location_period": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.BehaviorComponent.BehaviorWander.wander_radius": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.BehaviorComponent.td_types": {
		"link": "",
		"content": "//////////////////////////////////////// TD types\n\n"

	},
	"dcei.engine.proto.BehaviorComponent.BehaviorTdTypes.behavior_type": {
		"link": "dcei.engine.proto.BehaviorComponent.BehaviorType",
		"content": "The unit will wait for this duration before wandering to a new location.\n\n"

	},
	"dcei.engine.proto.BehaviorComponent.BehaviorTdTypes.unit_battle_data": {
		"link": "dcei.engine.proto.UnitBattleData",
		"content": "The unit will wander within this radius.\n\n"

	},
	"dcei.engine.proto.Unit.MiniMapConfig.circle": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Unit.MiniMapConfig.MiniMapTypeCircle.radius": {
		"link": "",
		"content": "The radius to use for the unit's minimap icon.\n\n"

	},
	"dcei.engine.proto.Unit.MiniMapConfig.sprite": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.Unit.MiniMapConfig.MiniMapTypeSprite.icon": {
		"link": "",
		"content": "The sprite name to use for the unit's minimap icon.\n\n"

	},
	"dcei.engine.proto.Unit.MiniMapConfig.MiniMapTypeSprite.size": {
		"link": "",
		"content": "The size to use for the unit's minimap icon.\n\n"

	},
	"dcei.engine.proto.EffectOffset.explicit_offset": {
		"link": "dcei.engine.proto.EffectOffset.ExplicitOffset",
		"content": "Offset base on forward/right/up coordinate.\n\n"

	},
	"dcei.engine.proto.EffectOffset.polar_offset": {
		"link": "dcei.engine.proto.EffectOffset.PolarOffset",
		"content": "Offset base on polar coordinate.\n\n"

	},
	"dcei.engine.proto.AreaSearchType.circle": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.AreaSearchCircle.radius": {
		"link": "",
		"content": "Sets the radius of the circle to search.\n\n"

	},
	"dcei.engine.proto.AreaSearchCircle.radius_expressions": {
		"link": "",
		"content": "Any expressions here will be evaluated and added to the **radius** each time the search is executed.\n\n"

	},
	"dcei.engine.proto.AreaSearchType.circle_sector": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.AreaSearchCircleSector.outer_radius": {
		"link": "",
		"content": "Sets the outer radius of the circle sector to search.\n\n"

	},
	"dcei.engine.proto.AreaSearchCircleSector.outer_radius_expressions": {
		"link": "",
		"content": "Any expressions here will be evaluated and added to the **outer radius** each time the search is executed.\n\n"

	},
	"dcei.engine.proto.AreaSearchCircleSector.inner_radius": {
		"link": "",
		"content": "Sets the inner radius of the circle sector to search.\n\n"

	},
	"dcei.engine.proto.AreaSearchCircleSector.inner_radius_expressions": {
		"link": "",
		"content": "Any expressions here will be evaluated and added to the **inner radius** each time the search is executed.\n\n"

	},
	"dcei.engine.proto.AreaSearchCircleSector.angle": {
		"link": "",
		"content": "Sets the angle of the circle sector to search. Used to make a search occur in an arc.\n\n"

	},
	"dcei.engine.proto.AreaSearchCircleSector.angle_expressions": {
		"link": "",
		"content": "Any expressions here will be evaluated and added to the **angle** each time the search is executed.\n\n"

	},
	"dcei.engine.proto.AreaSearchType.rectangle": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.AreaSearchRectangle.rectangle_origin": {
		"link": "",
		"content": "Sets the origin point of the rectangle.\n\n**CENTER**:  The rectangle search will be centered on the target position.\n\n**EXTEND**:  The search will be offset so its starting edge will originate at the target position. Using this setting, the search will extend from its target position rather than be centered on it.\n\n"

	},
	"dcei.engine.proto.AreaSearchRectangle.width": {
		"link": "",
		"content": "Sets the width of the rectangle to search.\n\n"

	},
	"dcei.engine.proto.AreaSearchRectangle.width_expressions": {
		"link": "",
		"content": "Any expressions here will be evaluated and added to the **width** each time the search is executed.\n\n"

	},
	"dcei.engine.proto.AreaSearchRectangle.length": {
		"link": "",
		"content": "Sets the length of the rectangle to search.\n\n"

	},
	"dcei.engine.proto.AreaSearchRectangle.length_expressions": {
		"link": "",
		"content": "Any expressions here will be evaluated and added to the **length** each time the search is executed.\n\n"

	},
	"dcei.engine.proto.AreaSearchType.children": {
		"link": "",
		"content": "The search will find the source unit's children.\n\n"

	},
	"dcei.engine.proto.EffectSetWaypoints.Waypoints.waypoints_name": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectSetWaypoints.Waypoints.from_unit": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectSetWaypoints.Waypoints.nearest_waypoint": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectSetWaypoints.Waypoints.NearestWaypoint.allowed_routes": {
		"link": "",
		"content": "Which routes will be searched, when set to NONE, all routes will be searched.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.use_search_location": {
		"link": "",
		"content": "Run the search using the **Search Effect** location.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.use_target_location": {
		"link": "",
		"content": "Run successive searches at the previous target's location.\n\nThis is useful for creating chain lightning effects.\n\n"

	},
	"dcei.engine.proto.EffectEnumerateUnitList.LocationModeDynamic.step_delay": {
		"link": "",
		"content": "Creates a delay between each search.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityCooldown.oneof_ability_name_type": {
		"link": "",
		"content": "Determines if the ability is selected by name, tag, or family.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityCooldown.ability_name": {
		"link": "",
		"content": "The name of the ability to modify cooldown for.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityCooldown.ability_family": {
		"link": "",
		"content": "The ability family to modify cooldowns for.\n\nNote that all abilities with this family on the target will have their cooldown reduced.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityCooldown.ability_tag": {
		"link": "",
		"content": "The ability tags to modify cooldowns for.\n\nNote that all abilities with this tag on the target will have their cooldown reduced.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityChargeCount.oneof_ability_name_type": {
		"link": "",
		"content": "Determines if the ability is selected by name, tag, or family.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityChargeCount.ability_name": {
		"link": "",
		"content": "The name of the ability to modify charge count for.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityChargeCount.ability_family": {
		"link": "",
		"content": "The ability family to modify charge count for.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityChargeCount.ability_tag": {
		"link": "",
		"content": "The ability tags to modify charge count for.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.modify_mana": {
		"link": "",
		"content": "Modifies a unit's mana.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyMana.modify_type": {
		"link": "dcei.engine.proto.EffectModifyUnit.ModifyType",
		"content": "Determine the modify type\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyMana.value_type": {
		"link": "dcei.engine.proto.ValueType",
		"content": "Whether to modify mana as percentage or explicit value.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyMana.amount": {
		"link": "",
		"content": "The amount of mana to modify.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyMana.expressions": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectModifyUnit.modify_shield": {
		"link": "",
		"content": "Modifies a unit's shields.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyShield.modify_type": {
		"link": "dcei.engine.proto.EffectModifyUnit.ModifyType",
		"content": "Determine the modify type\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyShield.value_type": {
		"link": "dcei.engine.proto.ValueType",
		"content": "Whether to modify shields as percentage or explicit value.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyShield.amount": {
		"link": "",
		"content": "The amount of shields to modify.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyShield.expressions": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectModifyUnit.modify_ability_cooldown": {
		"link": "",
		"content": "Modifies an ability's current cooldown.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityCooldown.modify_type": {
		"link": "dcei.engine.proto.EffectModifyUnit.ModifyType",
		"content": "Determine the modify type\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityCooldown.value_type": {
		"link": "dcei.engine.proto.ValueType",
		"content": "Whether to modify cooldown by a percentage or explicit value (in seconds).\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityCooldown.amount": {
		"link": "",
		"content": "The duration to modify cooldown by.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.modify_ability_charge_count": {
		"link": "",
		"content": "Modifies an ability's charge count.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityChargeCount.modify_type": {
		"link": "dcei.engine.proto.EffectModifyUnit.ModifyType",
		"content": "Determine the modify type\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityChargeCount.amount": {
		"link": "",
		"content": "The amount to modify charge count by.\n\n"

	},
	"dcei.engine.proto.EffectModifyUnit.ModifyAbilityChargeCount.clamp": {
		"link": "",
		"content": "When checked, clamp charge count between 0 and max charge count.\n\n"

	},
	"dcei.engine.proto.EffectIssueAbility.ability_name": {
		"link": "",
		"content": "Select the ability to be cast by name.\n\n"

	},
	"dcei.engine.proto.EffectIssueAbility.ability_tag": {
		"link": "",
		"content": "Select the first ability with the matching tag on the unit to cast.\n\n"

	},
	"dcei.engine.proto.EffectForce.direction": {
		"link": "",
		"content": "A force pointing towards the same direction.\n\n"

	},
	"dcei.engine.proto.EffectForce.Direction.direction_offset": {
		"link": "",
		"content": "Offset in degrees added (clockwise) to the effect facing to determine the force's direction.\n\n"

	},
	"dcei.engine.proto.EffectForce.center": {
		"link": "",
		"content": "A force pointing towards the effect center.\n\n"

	},
	"dcei.engine.proto.EffectForce.Center.direction_offset": {
		"link": "",
		"content": "Offset in degrees added (clockwise) to the force's direction.\n\n"

	},
	"dcei.engine.proto.EffectAttachUnit.AttachOffset.explicit_offset": {
		"link": "dcei.engine.proto.EffectOffset.ExplicitOffset",
		"content": "Offset is based on forward/right/up directions.\n\n"

	},
	"dcei.engine.proto.EffectAttachUnit.AttachOffset.polar_offset": {
		"link": "dcei.engine.proto.EffectOffset.PolarOffset",
		"content": "Offset is based on angle and distance.\n\n"

	},
	"dcei.engine.proto.EffectAttachUnit.AttachOffset.use_offset_when_effect_impact": {
		"link": "",
		"content": "Offset is based on the angle and distance between parent and child unit.\n\n"

	},
	"dcei.engine.proto.EffectOrientation.unit_orientation": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectOrientation.offset_orientation": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.OffsetOrientation.offset_start": {
		"link": "",
		"content": "Used in combination with Offset End to determine the facing of this effect. If start & end is at the same point, facing of the source unit is used as a fallback and if source is not an unit, facing of the caster unit is used.\n\n"

	},
	"dcei.engine.proto.OffsetOrientation.offset_end": {
		"link": "",
		"content": "Used in combination with Offset Start to determine the facing of this effect. If start & end is at the same point, facing of the source unit is used as a fallback and if source is not an unit, facing of the caster unit is used.\n\n"

	},
	"dcei.engine.proto.EffectApplySimpleMover.target_unit": {
		"link": "",
		"content": "The mover will move towards a target unit\n\n"

	},
	"dcei.engine.proto.EffectApplySimpleMover.TargetUnitMover.which_unit": {
		"link": "",
		"content": "Move towards which unit\n\n"

	},
	"dcei.engine.proto.EffectApplySimpleMover.TargetUnitMover.initial_speed": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectApplySimpleMover.TargetUnitMover.acceleration_magnitude": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectApplySimpleMover.TargetUnitMover.delay_seconds": {
		"link": "",
		"content": "When the mover become active after the effect applied\n\n"

	},
	"dcei.engine.proto.EffectApplySimpleMover.TargetUnitMover.duration_seconds": {
		"link": "",
		"content": "When the mover become inactive after the effect applied\n\n"

	},
	"dcei.engine.proto.EffectApplySimpleMover.target_direction": {
		"link": "",
		"content": "The mover will move in one direction, determined by the angle between the source and target at launch\n\n"

	},
	"dcei.engine.proto.EffectApplySimpleMover.TargetDirectionMover.initial_speed": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectApplySimpleMover.TargetDirectionMover.acceleration_magnitude": {
		"link": "",
		"content": ""

	},
	"dcei.engine.proto.EffectApplySimpleMover.TargetDirectionMover.delay_seconds": {
		"link": "",
		"content": "When the mover become active after the effect applied\n\n"

	},
	"dcei.engine.proto.EffectApplySimpleMover.TargetDirectionMover.duration_seconds": {
		"link": "",
		"content": "When the mover become inactive after the effect applied\n\n"

	},
	"dcei.engine.proto.OrbitingMover.speed": {
		"link": "",
		"content": "When set, the missile unit's orbit speed, in terrain grid-units-per-second.\n\n"

	},
	"dcei.engine.proto.OrbitingMover.degree_per_second": {
		"link": "",
		"content": "When set, the missile unit's orbit speed, in degrees-per-second.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.MoverStage.guidance": {
		"link": "dcei.engine.proto.GuidanceMover",
		"content": "Moves the missile unit linearly towards the target with tracking (like a guided missile).\n\n"

	},
	"dcei.engine.proto.MultiStageMover.MoverStage.ballistic": {
		"link": "dcei.engine.proto.BallisticMover",
		"content": "Moves the missile unit in a parabolic arc (like a thrown grenade).\n\n"

	},
	"dcei.engine.proto.MultiStageMover.MoverStage.throw": {
		"link": "dcei.engine.proto.ThrowMover",
		"content": "Moves the missile unit in a fixed direction. Unlike other movers, this mover doesn't move towards the target and will move indefinitely unless some other means of hit detection are used (such as the arrive_on_search_hit flag), or replaced by another mover (either by another launch missile effect, or when used in a multi-stage mover).\n\n"

	},
	"dcei.engine.proto.MultiStageMover.MotionOverlay.sine_wave": {
		"link": "",
		"content": "Moves in a sine wave pattern.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.SineWaveOverlay.wave_length": {
		"link": "dcei.engine.proto.ValueWithRangeAndExpression",
		"content": "The distance between consecutive wave patterns.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.MotionOverlay.orbiting": {
		"link": "",
		"content": "Moves with a circular motion centered around the mover's position without this overlay applied.\n\n"

	},
	"dcei.engine.proto.MultiStageMover.OrbitingOverlay.degree_per_second": {
		"link": "dcei.engine.proto.ValueWithRangeAndExpression",
		"content": "Circular speed in degrees per second.\n\n"

	}
}